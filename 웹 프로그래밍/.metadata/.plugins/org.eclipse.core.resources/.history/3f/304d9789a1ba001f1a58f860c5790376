<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ page import="java.sql.*" %>
<%@ page import="java.util.*" %>
<%@ page import="javax.servlet.http.*" %>

<%
    // 세션에서 사용자 이메일 가져오기
    String userEmail = (String) session.getAttribute("email");

    // 데이터베이스 연결 정보
    String dbUrl = "jdbc:mysql://localhost:3306/life_log_db?serverTimezone=UTC";
    String dbUser = "lifelog_admin";
    String dbPassword = "q1w2e3r4";

    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    // 데이터 저장용 맵
    Map<String, Double> goalAchievementMap = new LinkedHashMap<>();

    try {
        // 세션 확인
        if (userEmail == null) {
            response.sendRedirect("login.jsp");
            return;
        }

        // 데이터베이스 연결
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);

        // 특정 사용자의 log_name별 달성률 가져오기
        String query = """
            SELECT log_name, 
                   SUM(input_value) / (COUNT(DISTINCT date_entered) * goal_value) * 100 AS achievement_rate
            FROM logs
            WHERE user_id = ?
            GROUP BY log_name, goal_value
        """;

        pstmt = conn.prepareStatement(query);
        pstmt.setString(1, userEmail);
        rs = pstmt.executeQuery();

        // 데이터 저장
        while (rs.next()) {
            String logName = rs.getString("log_name");
            double achievementRate = rs.getDouble("achievement_rate");
            goalAchievementMap.put(logName, achievementRate);
        }

    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (rs != null) try { rs.close(); } catch (Exception e) { e.printStackTrace(); }
        if (pstmt != null) try { pstmt.close(); } catch (Exception e) { e.printStackTrace(); }
        if (conn != null) try { conn.close(); } catch (Exception e) { e.printStackTrace(); }
    }

    // JSON 데이터 생성
    StringBuilder goalAchievementJsonBuilder = new StringBuilder("{");
    int index = 0;
    for (Map.Entry<String, Double> entry : goalAchievementMap.entrySet()) {
        goalAchievementJsonBuilder.append("\"").append(entry.getKey()).append("\": ")
                                   .append(String.format("%.2f", entry.getValue()));
        if (index < goalAchievementMap.size() - 1) {
            goalAchievementJsonBuilder.append(", ");
        }
        index++;
    }
    goalAchievementJsonBuilder.append("}");
    String goalAchievementJson = goalAchievementJsonBuilder.toString();

    // JSP로 데이터 전달
    request.setAttribute("goalAchievementData", goalAchievementJson);
%>

<!DOCTYPE html>
<html>
<head>
    <title>주간 달성률 분석</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: white;
            margin: 0;
            padding: 20px;
        }
        #achievementContainer {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            justify-items: center;
        }
        #achievementContainer div {
            text-align: center;
        }
        #achievementContainer canvas {
            width: 250px !important;
            height: 250px !important;
        }
    </style>
</head>
<body>
    <h1>주간 달성률 분석</h1>
    <div id="achievementContainer"></div>

    <script>
        // 전달된 데이터 가져오기
        const goalAchievementData = JSON.parse('<%= request.getAttribute("goalAchievementData") %>');
        
        // 원그래프 생성 함수
        function createPieChart(logName, achievementRate) {
            const container = document.createElement('div');
            const canvas = document.createElement('canvas');
            canvas.width = 300;
            canvas.height = 300;

            container.appendChild(canvas);
            const ctx = canvas.getContext('2d');
            const remainingRate = 100 - achievementRate;

            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: [`${logName} 달성`, `${logName} 미달성`],
                    datasets: [{
                        data: [achievementRate, remainingRate],
                        backgroundColor: ['#4CAF50', '#FF5252']
                    }]
                },
                options: {
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                color: 'white'
                            }
                        }
                    }
                }
            });

            const achievementContainer = document.getElementById('achievementContainer');
            const title = document.createElement('h3');
            title.innerText = logName;
            title.style.color = 'white';
            container.insertBefore(title, canvas);
            achievementContainer.appendChild(container);
        }

        // 데이터로 그래프 생성
        Object.entries(goalAchievementData).forEach(([logName, achievementRate]) => {
            createPieChart(logName, parseFloat(achievementRate));
        });
    </script>
</body>
</html>
