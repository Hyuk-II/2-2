/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-12-16 12:32:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.math.BigDecimal;

public final class goal_005fset_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
    public String escapeJson(String str) {
        if (str == null) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        for (char c : str.toCharArray()) {
            switch (c) {
                case '"': sb.append("\\\""); break;
                case '\\': sb.append("\\\\"); break;
                case '/': sb.append("\\/"); break;
                case '\b': sb.append("\\b"); break;
                case '\f': sb.append("\\f"); break;
                case '\n': sb.append("\\n"); break;
                case '\r': sb.append("\\r"); break;
                case '\t': sb.append("\\t"); break;
                default:
                    if (c < ' ') {
                        String hex = Integer.toHexString(c);
                        sb.append("\\u");
                        for(int i = hex.length(); i < 4; i++) {
                            sb.append('0');
                        }
                        sb.append(hex);
                    } else {
                        sb.append(c);
                    }
            }
        }
        return sb.toString();
    }
    
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.math.BigDecimal");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <link rel=\"icon\" href=\"./images/Logo.png\">\n");
      out.write("    <title>Life Log</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            font-family: Arial, sans-serif;\n");
      out.write("            background-color: #1e1e1e;\n");
      out.write("            color: #fff;\n");
      out.write("            text-align: center;\n");
      out.write("            margin: 0;\n");
      out.write("            padding: 0;\n");
      out.write("            display: flex;\n");
      out.write("            height: 100vh;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .container {\n");
      out.write("            margin: 10px auto;\n");
      out.write("            width: 90%;\n");
      out.write("            max-width: 1000px;\n");
      out.write("            flex: 1;\n");
      out.write("            overflow-y: auto;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        h1 {\n");
      out.write("            font-family: Arial;\n");
      out.write("            margin-bottom: 10px;\n");
      out.write("            color: #fff;\n");
      out.write("            border-bottom: 2px solid #2D488B;\n");
      out.write("            padding-bottom: 10px;\n");
      out.write("            text-align: left;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        table {\n");
      out.write("            width: 100%;\n");
      out.write("            border-collapse: collapse;\n");
      out.write("            margin-top: 30px;\n");
      out.write("            margin-bottom: 10px;\n");
      out.write("            border-bottom: 2px solid #2D488B;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        th, td {\n");
      out.write("            padding: 10px;\n");
      out.write("            text-align: center;\n");
      out.write("            border: none;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        thead tr {\n");
      out.write("            background-color: #2D488B;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        tbody tr {\n");
      out.write("            background-color: #1a1a1a;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        tbody tr:nth-child(even) {\n");
      out.write("            background-color: #333;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        input[type=\"text\"] {\n");
      out.write("            width: 90%;\n");
      out.write("            padding: 8px;\n");
      out.write("            background-color: #000;\n");
      out.write("            color: #fff;\n");
      out.write("            border: 1px solid #444;\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .button-container {\n");
      out.write("            text-align: left;\n");
      out.write("            margin-top: 10px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button {\n");
      out.write("            padding: 10px 20px;\n");
      out.write("            margin: 5px;\n");
      out.write("            border: none;\n");
      out.write("            background-color: #2D488B;\n");
      out.write("            color: white;\n");
      out.write("            cursor: pointer;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            transition: background-color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button:hover {\n");
      out.write("            background-color: #218838;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .delete-btn {\n");
      out.write("            color: red;\n");
      out.write("            cursor: pointer;\n");
      out.write("            font-weight: bold;\n");
      out.write("            font-size: 18px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .menu-bar {\n");
      out.write("            width:200px;\n");
      out.write("            background-color: #274a8f;\n");
      out.write("            display: flex;\n");
      out.write("            flex-direction: column;\n");
      out.write("            align-items: center;\n");
      out.write("            padding: 20px 10px;\n");
      out.write("            gap: 20px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .menu-item {\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            justify-content: center;\n");
      out.write("            padding: 15px;\n");
      out.write("            width: 80%;\n");
      out.write("            color: white;\n");
      out.write("            text-align: center;\n");
      out.write("            background-color: #274a8f;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            cursor: pointer;\n");
      out.write("            transition: background-color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .menu-item:hover,\n");
      out.write("        .menu-item.active {\n");
      out.write("            background-color: #007bff;\n");
      out.write("        }\n");
      out.write("        .place-bottom{\n");
      out.write("      		bottom: 12px;\n");
      out.write("      		width: 160px;\n");
      out.write("      		position: absolute;\n");
      out.write("      	}\n");
      out.write("\n");
      out.write("        .logo-container {\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            gap: 10px;\n");
      out.write("            margin-bottom: 20px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .logo {\n");
      out.write("            height: 50px;\n");
      out.write("            width: auto;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .logo-text {\n");
      out.write("            font-size: 24px;\n");
      out.write("            font-weight: bold;\n");
      out.write("            color: white;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .goal-input {\n");
      out.write("            margin-top: 5px;\n");
      out.write("            width: 90%;\n");
      out.write("            padding: 8px;\n");
      out.write("            background-color: #000;\n");
      out.write("            color: #fff;\n");
      out.write("            border: 1px solid #444;\n");
      out.write("            text-align: center;\n");
      out.write("            display: inline-block;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .goal-input[disabled] {\n");
      out.write("            display: none;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("    <div class=\"menu-bar\">\n");
      out.write("        <div class=\"logo-container\"  onclick=\"location.href='main.jsp'\">\n");
      out.write("            <img src=\"./images/Logo.png\" alt=\"Logo\" class=\"logo\" />\n");
      out.write("            <div class=\"logo-text\">Life Log</div>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"menu-item\" data-page=\"main\" onclick=\"location.href='main.jsp'\">메인</div>\n");
      out.write("        <div class=\"menu-item\" data-page=\"log-analysis\" onclick=\"location.href='log_analyze.jsp'\">로그 분석</div>\n");
      out.write("        <div class=\"menu-item active\" data-page=\"log-record\" onclick=\"location.href='goal_set.jsp'\">로그 기록</div>\n");
      out.write("        <div class=\"menu-item\" data-page=\"diary\" onclick=\"location.href='diary.jsp'\">일기</div>\n");
      out.write("        <div class=\"menu-item place-bottom\" onclick=\"location.href='SignOut.jsp'\">로그아웃</div>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    <div class=\"container\">\n");
      out.write("        <h1>로그기록</h1>\n");
      out.write("        <table id=\"goalTable\">\n");
      out.write("            <thead>\n");
      out.write("                <tr>\n");
      out.write("                    <th></th>\n");
      out.write("                    <th>로그</th>\n");
      out.write("                    <th>입력값</th>\n");
      out.write("                    <th>단위</th>\n");
      out.write("                    <th>목표 설정 여부</th>\n");
      out.write("                </tr>\n");
      out.write("            </thead>\n");
      out.write("            <tbody>\n");
      out.write("            </tbody>\n");
      out.write("        </table>\n");
      out.write("        <div class=\"button-container\">\n");
      out.write("            <button id=\"addRow\">+</button>\n");
      out.write("            <button id=\"saveChanges\">수정완료</button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    ");
      out.write("\n");
      out.write("    \n");

    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    String jsonData = "[]";
    
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String url = "jdbc:mysql://localhost:3306/life_log_db?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC";
        conn = DriverManager.getConnection(url, "lifelog_admin", "q1w2e3r4");

        if (session == null || session.getAttribute("email") == null) {
            out.println("<script>alert('세션이 만료되었습니다. 다시 로그인해주세요.'); location.href='SignIn.jsp';</script>");
            return;
        }

        String userEmail = (String) session.getAttribute("email");

        java.util.Date today = new java.util.Date();
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
        String currentDate = sdf.format(today);

        String selectSQL = "SELECT l.log_id, l.log_name, l.input_value, l.unit, l.is_goal, l.goal_value " +
                           "FROM logs l " +
                           "INNER JOIN ( " +
                           "    SELECT log_name, MAX(log_id) AS max_log_id " +
                           "    FROM logs " +
                           "    WHERE user_id = ? AND DATE(date_entered) = ? " +
                           "    GROUP BY log_name " +
                           ") lm ON l.log_name = lm.log_name AND l.log_id = lm.max_log_id " +
                           "WHERE l.user_id = ? AND DATE(l.date_entered) = ?";
        pstmt = conn.prepareStatement(selectSQL);
        pstmt.setString(1, userEmail);
        pstmt.setString(2, currentDate);
        pstmt.setString(3, userEmail);
        pstmt.setString(4, currentDate);
        rs = pstmt.executeQuery();

        List<Map<String, Object>> goals = new ArrayList<>();
        while (rs.next()) {
            Map<String, Object> goal = new HashMap<>();
            goal.put("log_id", rs.getInt("log_id"));
            goal.put("log_name", rs.getString("log_name"));
            goal.put("input_value", rs.getDouble("input_value"));
            goal.put("unit", rs.getString("unit"));
            goal.put("is_goal", rs.getBoolean("is_goal"));
            goal.put("goal_value", rs.getObject("goal_value"));
            goals.add(goal);
        }

        StringBuilder jsonBuilder = new StringBuilder("[");
        for (int i = 0; i < goals.size(); i++) {
            Map<String, Object> goal = goals.get(i);
            jsonBuilder.append("{");
            jsonBuilder.append("\"log_id\":").append(goal.get("log_id")).append(",");

            String logName = escapeJson(goal.get("log_name") != null ? (String)goal.get("log_name") : "");
            jsonBuilder.append("\"log_name\":\"").append(logName).append("\",");

            jsonBuilder.append("\"input_value\":").append(goal.get("input_value")).append(",");

            String unit = escapeJson(goal.get("unit") != null ? (String)goal.get("unit") : "");
            jsonBuilder.append("\"unit\":\"").append(unit).append("\",");

            jsonBuilder.append("\"is_goal\":").append(goal.get("is_goal")).append(",");

            if (goal.get("goal_value") == null) {
                jsonBuilder.append("\"goal_value\":null");
            } else {
                String goalValue = escapeJson(goal.get("goal_value").toString());
                boolean isNumeric = true;
                try {
                    Double.parseDouble(goalValue);
                } catch (NumberFormatException e) {
                    isNumeric = false;
                }
                if (isNumeric) {
                    jsonBuilder.append("\"goal_value\":").append(goal.get("goal_value"));
                } else {
                    jsonBuilder.append("\"goal_value\":\"").append(goalValue).append("\"");
                }
            }

            jsonBuilder.append("}");
            if (i < goals.size() - 1) jsonBuilder.append(",");
        }
        jsonBuilder.append("]");
        jsonData = jsonBuilder.toString();
    } catch (Exception e) {
        e.printStackTrace();
        out.println("<script>alert('데이터를 불러오는 중 오류가 발생했습니다. 관리자에게 문의해주세요.'); location.href='SignIn.jsp';</script>");
    } finally {
        if (rs != null) try { rs.close(); } catch (SQLException e) { e.printStackTrace(); }
        if (pstmt != null) try { pstmt.close(); } catch (SQLException e) { e.printStackTrace(); }
        if (conn != null) try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }
    }

      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    var goalsData = ");
      out.print( jsonData );
      out.write(";\n");
      out.write("    console.log(\"서버에서 가져온 데이터:\", goalsData);\n");
      out.write("\n");
      out.write("    document.addEventListener(\"DOMContentLoaded\", function () {\n");
      out.write("        console.log(\"DOMContentLoaded 이벤트 발생\");\n");
      out.write("\n");
      out.write("        const table = document.getElementById(\"goalTable\").querySelector(\"tbody\");\n");
      out.write("        if (table === null) {\n");
      out.write("            console.error(\"tbody 요소를 찾을 수 없습니다.\");\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("        console.log(\"Selected tbody:\", table);\n");
      out.write("\n");
      out.write("        const addRowBtn = document.getElementById(\"addRow\");\n");
      out.write("        const saveChangesBtn = document.getElementById(\"saveChanges\");\n");
      out.write("\n");
      out.write("        if (Array.isArray(goalsData)) {\n");
      out.write("            goalsData.forEach((goal, index) => {\n");
      out.write("                console.log(`Adding row ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${index + 1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(":`, goal);\n");
      out.write("                const newRow = document.createElement(\"tr\");\n");
      out.write("                \n");
      out.write("                newRow.setAttribute(\"data-log-id\", goal.log_id);\n");
      out.write("\n");
      out.write("                const deleteCell = document.createElement(\"td\");\n");
      out.write("                deleteCell.className = \"delete-btn\";\n");
      out.write("                deleteCell.textContent = \"-\";\n");
      out.write("                newRow.appendChild(deleteCell);\n");
      out.write("\n");
      out.write("                const logNameCell = document.createElement(\"td\");\n");
      out.write("                const logNameInput = document.createElement(\"input\");\n");
      out.write("                logNameInput.type = \"text\";\n");
      out.write("                logNameInput.name = \"log_name\";\n");
      out.write("                logNameInput.value = goal.log_name;\n");
      out.write("                logNameCell.appendChild(logNameInput);\n");
      out.write("                newRow.appendChild(logNameCell);\n");
      out.write("\n");
      out.write("                const inputValueCell = document.createElement(\"td\");\n");
      out.write("                const inputValueInput = document.createElement(\"input\");\n");
      out.write("                inputValueInput.type = \"text\";\n");
      out.write("                inputValueInput.step = \"0.01\";\n");
      out.write("                inputValueInput.name = \"input_value\";\n");
      out.write("                inputValueInput.value = goal.input_value;\n");
      out.write("                inputValueCell.appendChild(inputValueInput);\n");
      out.write("                newRow.appendChild(inputValueCell);\n");
      out.write("\n");
      out.write("                const unitCell = document.createElement(\"td\");\n");
      out.write("                const unitInput = document.createElement(\"input\");\n");
      out.write("                unitInput.type = \"text\";\n");
      out.write("                unitInput.name = \"unit\";\n");
      out.write("                unitInput.value = goal.unit;\n");
      out.write("                unitCell.appendChild(unitInput);\n");
      out.write("                newRow.appendChild(unitCell);\n");
      out.write("\n");
      out.write("                const isGoalCell = document.createElement(\"td\");\n");
      out.write("                \n");
      out.write("                const isGoalCheckbox = document.createElement(\"input\");\n");
      out.write("                isGoalCheckbox.type = \"checkbox\";\n");
      out.write("                isGoalCheckbox.name = \"is_goal\";\n");
      out.write("                isGoalCheckbox.className = \"goal-checkbox\";\n");
      out.write("                if (goal.is_goal) isGoalCheckbox.checked = true;\n");
      out.write("                isGoalCheckbox.onclick = function() {\n");
      out.write("                    toggleGoalValue(this);\n");
      out.write("                };\n");
      out.write("                isGoalCell.appendChild(isGoalCheckbox);\n");
      out.write("\n");
      out.write("                const goalValueInputField = document.createElement(\"input\");\n");
      out.write("                goalValueInputField.type = \"text\";\n");
      out.write("                goalValueInputField.step = \"0.01\";\n");
      out.write("                goalValueInputField.name = \"goal_value\";\n");
      out.write("                goalValueInputField.className = \"goal-input\";\n");
      out.write("                goalValueInputField.placeholder = \"목표 입력\";\n");
      out.write("                goalValueInputField.value = goal.goal_value != null ? goal.goal_value : '';\n");
      out.write("                if (!goal.is_goal) {\n");
      out.write("                    goalValueInputField.disabled = true;\n");
      out.write("                    goalValueInputField.style.display = \"none\";\n");
      out.write("                }\n");
      out.write("                isGoalCell.appendChild(goalValueInputField);\n");
      out.write("\n");
      out.write("                newRow.appendChild(isGoalCell);\n");
      out.write("\n");
      out.write("                table.appendChild(newRow);\n");
      out.write("                console.log(`Row ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${index + 1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" appended to table.`);\n");
      out.write("                \n");
      out.write("                attachDeleteEvent(deleteCell);\n");
      out.write("            });\n");
      out.write("        } else {\n");
      out.write("            console.error(\"goalsData가 배열이 아닙니다.\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        addRowBtn.addEventListener(\"click\", function () {\n");
      out.write("            console.log(\"'+' 버튼 클릭됨\");\n");
      out.write("            const newRow = document.createElement(\"tr\");\n");
      out.write("\n");
      out.write("            const deleteCell = document.createElement(\"td\");\n");
      out.write("            deleteCell.className = \"delete-btn\";\n");
      out.write("            deleteCell.textContent = \"-\";\n");
      out.write("            newRow.appendChild(deleteCell);\n");
      out.write("\n");
      out.write("            const logNameCell = document.createElement(\"td\");\n");
      out.write("            const logNameInput = document.createElement(\"input\");\n");
      out.write("            logNameInput.type = \"text\";\n");
      out.write("            logNameInput.name = \"log_name\";\n");
      out.write("            logNameInput.placeholder = \"로그 입력\";\n");
      out.write("            logNameCell.appendChild(logNameInput);\n");
      out.write("            newRow.appendChild(logNameCell);\n");
      out.write("\n");
      out.write("            const inputValueCell = document.createElement(\"td\");\n");
      out.write("            const inputValueInput = document.createElement(\"input\");\n");
      out.write("            inputValueInput.type = \"text\";\n");
      out.write("            inputValueInput.step = \"0.01\";\n");
      out.write("            inputValueInput.name = \"input_value\";\n");
      out.write("            inputValueInput.placeholder = \"입력값\";\n");
      out.write("            inputValueCell.appendChild(inputValueInput);\n");
      out.write("            newRow.appendChild(inputValueCell);\n");
      out.write("\n");
      out.write("            const unitCell = document.createElement(\"td\");\n");
      out.write("            const unitInput = document.createElement(\"input\");\n");
      out.write("            unitInput.type = \"text\";\n");
      out.write("            unitInput.name = \"unit\";\n");
      out.write("            unitInput.placeholder = \"단위 입력\";\n");
      out.write("            unitCell.appendChild(unitInput);\n");
      out.write("            newRow.appendChild(unitCell);\n");
      out.write("\n");
      out.write("            const isGoalCell = document.createElement(\"td\");\n");
      out.write("            \n");
      out.write("            const isGoalCheckbox = document.createElement(\"input\");\n");
      out.write("            isGoalCheckbox.type = \"checkbox\";\n");
      out.write("            isGoalCheckbox.name = \"is_goal\";\n");
      out.write("            isGoalCheckbox.className = \"goal-checkbox\";\n");
      out.write("            isGoalCheckbox.onclick = function() {\n");
      out.write("                toggleGoalValue(this);\n");
      out.write("            };\n");
      out.write("            isGoalCell.appendChild(isGoalCheckbox);\n");
      out.write("\n");
      out.write("            const goalValueInputField = document.createElement(\"input\");\n");
      out.write("            goalValueInputField.type = \"text\";\n");
      out.write("            goalValueInputField.step = \"0.01\";\n");
      out.write("            goalValueInputField.name = \"goal_value\";\n");
      out.write("            goalValueInputField.className = \"goal-input\";\n");
      out.write("            goalValueInputField.placeholder = \"목표 입력\";\n");
      out.write("            goalValueInputField.disabled = true;\n");
      out.write("            goalValueInputField.style.display = \"none\";\n");
      out.write("            isGoalCell.appendChild(goalValueInputField);\n");
      out.write("\n");
      out.write("            newRow.appendChild(isGoalCell);\n");
      out.write("\n");
      out.write("            table.appendChild(newRow);\n");
      out.write("            console.log(\"New row appended via '+' button.\");\n");
      out.write("\n");
      out.write("            attachDeleteEvent(deleteCell);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        saveChangesBtn.addEventListener(\"click\", function () {\n");
      out.write("            console.log(\"'수정완료' 버튼 클릭됨\");\n");
      out.write("\n");
      out.write("            const rows = table.querySelectorAll(\"tr\");\n");
      out.write("            if (rows.length === 0) {\n");
      out.write("                alert(\"저장할 목표가 없습니다.\");\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            let formData = \"\";\n");
      out.write("            let isValid = true;\n");
      out.write("\n");
      out.write("            rows.forEach((row) => {\n");
      out.write("                const logId = row.getAttribute(\"data-log-id\") || \"\";\n");
      out.write("                const logNameInput = row.querySelector(\"input[name='log_name']\");\n");
      out.write("                const inputValueInput = row.querySelector(\"input[name='input_value']\");\n");
      out.write("                const unitInput = row.querySelector(\"input[name='unit']\");\n");
      out.write("                const isGoalInput = row.querySelector(\"input[name='is_goal']\");\n");
      out.write("                const goalValueInput = row.querySelector(\"input[name='goal_value']\");\n");
      out.write("\n");
      out.write("                const logName = logNameInput ? logNameInput.value.trim() : \"\";\n");
      out.write("                const inputValue = inputValueInput ? inputValueInput.value.trim() : \"\";\n");
      out.write("                const unit = unitInput ? unitInput.value.trim() : \"\";\n");
      out.write("                const isGoal = isGoalInput ? isGoalInput.checked : false;\n");
      out.write("                const goalValue = isGoal ? (goalValueInput ? goalValueInput.value.trim() : \"\") : \"\";\n");
      out.write("\n");
      out.write("                if (!logName || !inputValue || !unit) {\n");
      out.write("                    alert(\"로그, 입력값, 단위는 필수 항목입니다.\");\n");
      out.write("                    isValid = false;\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if (isGoal && !goalValue) {\n");
      out.write("                    alert(\"목표 설정 시 목표 값을 입력해주세요.\");\n");
      out.write("                    isValid = false;\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                formData +=\n");
      out.write("                    \"log_id=\" + encodeURIComponent(logId) + \"&\" +\n");
      out.write("                    \"log_name=\" +\n");
      out.write("                    encodeURIComponent(logName) +\n");
      out.write("                    \"&input_value=\" +\n");
      out.write("                    encodeURIComponent(inputValue) +\n");
      out.write("                    \"&unit=\" +\n");
      out.write("                    encodeURIComponent(unit) +\n");
      out.write("                    \"&is_goal=\" +\n");
      out.write("                    (isGoal ? \"1\" : \"0\") +\n");
      out.write("                    \"&goal_value=\" +\n");
      out.write("                    encodeURIComponent(goalValue) +\n");
      out.write("                    \"&\";\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            if (!isValid) return;\n");
      out.write("\n");
      out.write("            formData = formData.slice(0, -1);\n");
      out.write("            console.log(\"전송할 formData:\", formData);\n");
      out.write("\n");
      out.write("            const xhr = new XMLHttpRequest();\n");
      out.write("            xhr.open(\"POST\", \"saveGoals.jsp\", true);\n");
      out.write("            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n");
      out.write("\n");
      out.write("            xhr.onreadystatechange = function () {\n");
      out.write("                if (xhr.readyState === 4) {\n");
      out.write("                    if (xhr.status === 200) {\n");
      out.write("                        try {\n");
      out.write("                            const response = JSON.parse(xhr.responseText);\n");
      out.write("                            console.log(\"서버 응답:\", response);\n");
      out.write("                            if (response.status === \"success\") {\n");
      out.write("                                alert(response.message || \"데이터가 성공적으로 저장되었습니다.\");\n");
      out.write("                                location.reload();\n");
      out.write("                            } else {\n");
      out.write("                                alert(\"저장 실패 : \" + (response.message || \"알 수 없는 오류\"));\n");
      out.write("                            }\n");
      out.write("                        } catch (e) {\n");
      out.write("                            console.error(\"JSON 파싱 오류:\", e);\n");
      out.write("                            console.error(\"서버 응답 원본:\", xhr.responseText);\n");
      out.write("                            alert(\"서버 응답을 처리하는 중 오류가 발생했습니다.\");\n");
      out.write("                        }\n");
      out.write("                    } else {\n");
      out.write("                        alert(\"서버 오류가 발생했습니다.\");\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            xhr.send(formData);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        function toggleGoalValue(checkbox) {\n");
      out.write("            const goalInput = checkbox.nextElementSibling;\n");
      out.write("            if (checkbox.checked) {\n");
      out.write("                goalInput.style.display = \"inline-block\";\n");
      out.write("                goalInput.disabled = false;\n");
      out.write("            } else {\n");
      out.write("                goalInput.style.display = \"none\";\n");
      out.write("                goalInput.value = \"\";\n");
      out.write("                goalInput.disabled = true;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function updateTable(data) {\n");
      out.write("            console.log(\"테이블 갱신 시작\");\n");
      out.write("            table.innerHTML = \"\";\n");
      out.write("            data.forEach((item) => {\n");
      out.write("                const newRow = document.createElement(\"tr\");\n");
      out.write("                newRow.setAttribute(\"data-log-id\", item.log_id);\n");
      out.write("                newRow.innerHTML = `\n");
      out.write("                    <td class=\"delete-btn\">-</td>\n");
      out.write("                    <td><input type=\"text\" name=\"log_name\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.log_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"></td>\n");
      out.write("                    <td><input type=\"text\" name=\"input_value\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.input_value}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"></td>\n");
      out.write("                    <td><input type=\"text\" name=\"unit\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.unit}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"></td>\n");
      out.write("                    <td>\n");
      out.write("                        <input type=\"checkbox\" name=\"is_goal\" class=\"goal-checkbox\" ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.is_goal ? 'checked' : ''}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" onclick=\"toggleGoalValue(this)\">\n");
      out.write("                        <input type=\"text\" name=\"goal_value\" class=\"goal-input\" placeholder=\"목표 입력\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.goal_value != null ? item.goal_value : ''}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('"');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.is_goal ? '' : 'disabled style=\"display:none;\"'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(">\n");
      out.write("                    </td>\n");
      out.write("                `;\n");
      out.write("                table.appendChild(newRow);\n");
      out.write("\n");
      out.write("                attachDeleteEvent(newRow.querySelector(\".delete-btn\"));\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function attachDeleteEvent(deleteBtn) {\n");
      out.write("            deleteBtn.addEventListener(\"click\", function () {\n");
      out.write("                console.log(\"삭제 버튼 클릭됨\");\n");
      out.write("                if (confirm(\"해당 행을 삭제하시겠습니까?\")) {\n");
      out.write("                    const row = deleteBtn.closest(\"tr\");\n");
      out.write("                    if (row) {\n");
      out.write("                        const logId = row.getAttribute(\"data-log-id\");\n");
      out.write("                        if (!logId) {\n");
      out.write("                            alert(\"삭제할 로그 ID가 없습니다.\");\n");
      out.write("                            return;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        const xhr = new XMLHttpRequest();\n");
      out.write("                        xhr.open(\"POST\", \"deleteGoal.jsp\", true);\n");
      out.write("                        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n");
      out.write("\n");
      out.write("                        xhr.onreadystatechange = function () {\n");
      out.write("                            if (xhr.readyState === 4) {\n");
      out.write("                                if (xhr.status === 200) {\n");
      out.write("                                    try {\n");
      out.write("                                        const response = JSON.parse(xhr.responseText);\n");
      out.write("                                        console.log(\"서버 응답:\", response);\n");
      out.write("                                        if (response.status === \"success\") {\n");
      out.write("                                            alert(response.message || \"데이터가 성공적으로 삭제되었습니다.\");\n");
      out.write("                                            row.remove();\n");
      out.write("                                        } else {\n");
      out.write("                                            alert(\"삭제에 실패했습니다: \" + (response.message || \"알 수 없는 오류\"));\n");
      out.write("                                        }\n");
      out.write("                                    } catch (e) {\n");
      out.write("                                        console.error(\"JSON 파싱 오류:\", e);\n");
      out.write("                                        console.error(\"서버 응답 원본:\", xhr.responseText);\n");
      out.write("                                        alert(\"서버 응답을 처리하는 중 오류가 발생했습니다.\");\n");
      out.write("                                    }\n");
      out.write("                                } else {\n");
      out.write("                                    alert(\"서버 오류가 발생했습니다.\");\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                        };\n");
      out.write("\n");
      out.write("                        xhr.send(\"log_id=\" + encodeURIComponent(logId));\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
