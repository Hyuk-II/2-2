/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-12-16 13:40:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import javax.servlet.http.*;

public final class log_005fanalyze_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');


String userEmail = (String) session.getAttribute("email"); 

String dbUrl = "jdbc:mysql://localhost:3306/life_log_db?serverTimezone=UTC";
String dbUser = "lifelog_admin";
String dbPassword = "q1w2e3r4";

Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;

Map<String, double[]> logDataMap = new LinkedHashMap<>();
Map<String, String> unitMap = new LinkedHashMap<>();
Map<String, Double> goalAchievementMap = new LinkedHashMap<>();

try {
    if (userEmail == null) {
        response.sendRedirect("login.jsp");
        return;
    }

    Class.forName("com.mysql.cj.jdbc.Driver");
    conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);

    String logNameQuery = "SELECT DISTINCT log_name, unit FROM logs WHERE user_id = ?";
    pstmt = conn.prepareStatement(logNameQuery);
    pstmt.setString(1, userEmail);
    rs = pstmt.executeQuery();
    List<String> logNames = new ArrayList<>();
    while (rs.next()) {
        String logName = rs.getString("log_name");
        logNames.add(logName);
        unitMap.put(logName, rs.getString("unit"));
    }
    rs.close();
    pstmt.close();

    for (String logName : logNames) {
        double[] weeklyData = new double[7];
        Arrays.fill(weeklyData, 0.0);
        double totalInput = 0.0;
        int activeDays = 0;
        double goalValue = 0.0;

        String query = 
            "SELECT day_of_week, SUM(input_value) AS total_input, COUNT(DISTINCT date_entered) AS active_days, goal_value " +
            "FROM logs " +
            "WHERE user_id = ? AND log_name = ? AND WEEK(date_entered, 1) = ( " +
            "    SELECT MAX(WEEK(date_entered, 1)) FROM logs WHERE user_id = ? AND log_name = ? " +
            ") GROUP BY day_of_week, goal_value";
        pstmt = conn.prepareStatement(query);
        pstmt.setString(1, userEmail);
        pstmt.setString(2, logName);
        pstmt.setString(3, userEmail);
        pstmt.setString(4, logName);

        rs = pstmt.executeQuery();

        Map<String, Integer> dayIndexMap = Map.of(
            "월요일", 0,
            "화요일", 1,
            "수요일", 2,
            "목요일", 3,
            "금요일", 4,
            "토요일", 5,
            "일요일", 6
        );

        while (rs.next()) {
            String day = rs.getString("day_of_week");
            double dayTotalInput = rs.getDouble("total_input");
            int dayActiveDays = rs.getInt("active_days");
            goalValue = rs.getDouble("goal_value");

            totalInput += dayTotalInput;
            activeDays += dayActiveDays;

            if (dayIndexMap.containsKey(day)) {
                int index = dayIndexMap.get(day);
                weeklyData[index] = dayTotalInput;
            }
        }

        if (activeDays > 0 && goalValue > 0) {
            double achievementRate = (totalInput / (activeDays * goalValue)) * 100;
            goalAchievementMap.put(logName, achievementRate);
        }

        logDataMap.put(logName, weeklyData);
        rs.close();
    }

} catch (Exception e) {
    e.printStackTrace();
} finally {
    if (rs != null) rs.close();
    if (pstmt != null) pstmt.close();
    if (conn != null) conn.close();
}

StringBuilder graphDataJsonBuilder = new StringBuilder();
graphDataJsonBuilder.append("{");
int logIndex = 0;
for (Map.Entry<String, double[]> entry : logDataMap.entrySet()) {
    graphDataJsonBuilder.append("\"").append(entry.getKey()).append("\": [");
    double[] data = entry.getValue();
    for (int i = 0; i < data.length; i++) {
        graphDataJsonBuilder.append(data[i]);
        if (i < data.length - 1) {
            graphDataJsonBuilder.append(", ");
        }
    }
    graphDataJsonBuilder.append("]");
    if (logIndex < logDataMap.size() - 1) {
        graphDataJsonBuilder.append(", ");
    }
    logIndex++;
}
graphDataJsonBuilder.append("}");
String graphDataJson = graphDataJsonBuilder.toString();

StringBuilder goalAchievementJsonBuilder = new StringBuilder();
goalAchievementJsonBuilder.append("{");
int achievementIndex = 0;
for (Map.Entry<String, Double> entry : goalAchievementMap.entrySet()) {
    goalAchievementJsonBuilder.append("\"").append(entry.getKey()).append("\": ").append(entry.getValue());
    if (achievementIndex < goalAchievementMap.size() - 1) {
        goalAchievementJsonBuilder.append(", ");
    }
    achievementIndex++;
}
goalAchievementJsonBuilder.append("}");
String goalAchievementJson = goalAchievementJsonBuilder.toString();

request.setAttribute("graphData", graphDataJson);
request.setAttribute("goalAchievementData", goalAchievementJson);
request.setAttribute("logNames", logDataMap.keySet());
request.setAttribute("unitMap", unitMap);

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <link rel=\"icon\" href=\"./images/Logo.png\">\n");
      out.write("    <title>Life Log</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            font-family: Arial, sans-serif;\n");
      out.write("            background-color: #1e1e1e;\n");
      out.write("            color: white;\n");
      out.write("            margin: 0;\n");
      out.write("            padding: 0;\n");
      out.write("            display: flex;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        h1 {\n");
      out.write("            font-family: Arial;\n");
      out.write("            margin-bottom: 10px;\n");
      out.write("            color: #fff;\n");
      out.write("            border-bottom: 2px solid #2D488B;\n");
      out.write("            padding-bottom: 10px;\n");
      out.write("            text-align: left;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .container {\n");
      out.write("            display: flex;\n");
      out.write("            height: 100vh;\n");
      out.write("            width: 100%;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .menu-bar {\n");
      out.write("        	width:200px;\n");
      out.write("        	background-color: #274a8f;\n");
      out.write("        	display: flex;\n");
      out.write("        	flex-direction: column;\n");
      out.write("        	align-items: center;\n");
      out.write("        	padding: 20px 10px;\n");
      out.write("        	gap: 20px;\n");
      out.write("		}\n");
      out.write("\n");
      out.write("      	.menu-item {\n");
      out.write("        	display: flex;\n");
      out.write("        	align-items: center;\n");
      out.write("        	justify-content: center;\n");
      out.write("        	padding: 15px;\n");
      out.write("        	width: 80%;\n");
      out.write("        	color: white;\n");
      out.write("        	text-align: center;\n");
      out.write("        	background-color: #274a8f;\n");
      out.write("        	border-radius: 5px;\n");
      out.write("        	cursor: pointer;\n");
      out.write("        	transition: background-color 0.3s ease;\n");
      out.write("      	}\n");
      out.write("\n");
      out.write("      	.menu-item:hover,\n");
      out.write("      	.menu-item.active {\n");
      out.write("        	background-color: #007bff;\n");
      out.write("      	}\n");
      out.write("      	\n");
      out.write("      	.place-bottom{\n");
      out.write("      		bottom: 12px;\n");
      out.write("      		width: 160px;\n");
      out.write("      		position: absolute;\n");
      out.write("      	}\n");
      out.write("\n");
      out.write("          select {\n");
      out.write("            width: 150px;\n");
      out.write("            height: 40px;\n");
      out.write("            background-color: #063a71;\n");
      out.write("            color: white;\n");
      out.write("            border: none;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            padding: 5px 10px;\n");
      out.write("            font-size: 16px;\n");
      out.write("            outline: none;\n");
      out.write("            cursor: pointer;\n");
      out.write("            transition: background-color 0.3s ease;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        select:hover {\n");
      out.write("            background-color: #0056b3;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        option {\n");
      out.write("            font-size: 16px;\n");
      out.write("            padding: 10px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .logo-container {\n");
      out.write("  			display: flex;\n");
      out.write("  			align-items: center;\n");
      out.write("  			gap: 10px;\n");
      out.write("  			margin-bottom: 20px;\n");
      out.write("  		}\n");
      out.write("\n");
      out.write("\n");
      out.write("		.logo {\n");
      out.write("  		    height: 50px;\n");
      out.write("  			width: auto;\n");
      out.write("  			}\n");
      out.write("\n");
      out.write("		.logo-text {\n");
      out.write("  			font-size: 24px;\n");
      out.write("  			font-weight: bold;\n");
      out.write("  			color: white;\n");
      out.write("		}\n");
      out.write("\n");
      out.write("        .main-content {\n");
      out.write("            flex: 1;\n");
      out.write("            padding-left: 40px;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("            overflow-y: auto;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .section1 {\n");
      out.write("            margin-top: 40px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .section2 {\n");
      out.write("            margin-top: 60px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        hr {\n");
      out.write("            height: 5px;\n");
      out.write("            border: none;\n");
      out.write("            background-color: blue;\n");
      out.write("            margin-top: 10px;\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("		.graph-container canvas {\n");
      out.write("		    display: block;\n");
      out.write("		    margin: 0 auto;\n");
      out.write("		    width: 900px !important;\n");
      out.write("		    height: 400px !important;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		#achievementContainer {\n");
      out.write("		    display: grid;\n");
      out.write("		    grid-template-columns: repeat(2, 1fr);\n");
      out.write("		    gap: 20px;\n");
      out.write("		    justify-items: center;\n");
      out.write("		    padding: 20px;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		#achievementContainer div {\n");
      out.write("		    width: 300px;\n");
      out.write("		    height: 350px;\n");
      out.write("		    display: flex;\n");
      out.write("		    flex-direction: column;\n");
      out.write("		    align-items: center;\n");
      out.write("		    justify-content: flex-start;\n");
      out.write("		    box-sizing: border-box;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		#achievementContainer canvas {\n");
      out.write("		    width: 250px !important;\n");
      out.write("		    height: 250px !important;\n");
      out.write("		}\n");
      out.write("\n");
      out.write("        .info-table {\n");
      out.write("            width: 70%;\n");
      out.write("            margin: 10px auto;\n");
      out.write("            border-collapse: collapse;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .info-table tr {\n");
      out.write("            border-bottom: 1px solid #444;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .info-table th, .info-table td {\n");
      out.write("            padding: 15px 10px;\n");
      out.write("            text-align: left;\n");
      out.write("            color: white;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .info-table th {\n");
      out.write("            font-weight: bold;\n");
      out.write("            text-align: left;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .info-table td:first-child {\n");
      out.write("            text-align: left;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("    </style>\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n");
      out.write("    <script>\n");
      out.write("        let chart;\n");
      out.write("\n");
      out.write("        const graphData = JSON.parse('");
      out.print( request.getAttribute("graphData") );
      out.write("');\n");
      out.write("        const goalAchievementData = JSON.parse('");
      out.print( request.getAttribute("goalAchievementData") );
      out.write("');\n");
      out.write("\n");
      out.write("        console.log(\"goalAchievementData:\", goalAchievementData);\n");
      out.write("\n");
      out.write("\n");
      out.write("        function drawGraph(logName) {\n");
      out.write("            const data = graphData[logName];\n");
      out.write("            const ctx = document.getElementById('graphCanvas').getContext('2d');\n");
      out.write("\n");
      out.write("        	const colors = [\n");
      out.write("            	'rgba(255, 99, 132, 0.7)',\n");
      out.write("            	'rgba(54, 162, 235, 0.7)',\n");
      out.write("            	'rgba(255, 206, 86, 0.7)',\n");
      out.write("            	'rgba(75, 192, 192, 0.7)',\n");
      out.write("            	'rgba(153, 102, 255, 0.7)',\n");
      out.write("            	'rgba(255, 159, 64, 0.7)',\n");
      out.write("            	'rgba(199, 199, 199, 0.7)'\n");
      out.write("       		];\n");
      out.write("\n");
      out.write("        	const borderColors = [\n");
      out.write("            	'rgba(255, 99, 132, 1)',\n");
      out.write("            	'rgba(54, 162, 235, 1)',\n");
      out.write("            	'rgba(255, 206, 86, 1)',\n");
      out.write("            	'rgba(75, 192, 192, 1)',\n");
      out.write("            	'rgba(153, 102, 255, 1)',\n");
      out.write("            	'rgba(255, 159, 64, 1)',\n");
      out.write("            	'rgba(199, 199, 199, 1)'\n");
      out.write("        	];\n");
      out.write("\n");
      out.write("            if (chart) {\n");
      out.write("                chart.destroy();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            chart = new Chart(ctx, {\n");
      out.write("                type: 'bar',\n");
      out.write("                data: {\n");
      out.write("                    labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n");
      out.write("                    datasets: [{\n");
      out.write("                        label: logName,\n");
      out.write("                        data: data,\n");
      out.write("                        backgroundColor: colors,\n");
      out.write("                        borderColor: borderColors,\n");
      out.write("                        borderWidth: 1\n");
      out.write("                    }]\n");
      out.write("                },\n");
      out.write("                options: {\n");
      out.write("                    scales: {\n");
      out.write("                        y: {\n");
      out.write("                            beginAtZero: true,\n");
      out.write("                            ticks: {\n");
      out.write("                                color: 'white'\n");
      out.write("                            }\n");
      out.write("                        },\n");
      out.write("                        x: {\n");
      out.write("                            ticks: {\n");
      out.write("                                color: 'white'\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    },\n");
      out.write("                    plugins: {\n");
      out.write("                        legend: {\n");
      out.write("                            display: false\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function createPieChartWithTitle(logName, index) {\n");
      out.write("            const container = document.createElement('div');\n");
      out.write("            console.log(\"createPieChartWithTitle logName:\", logName);\n");
      out.write("            \n");
      out.write("            container.style.width = '48%';\n");
      out.write("            container.style.margin = '1%';\n");
      out.write("            container.style.textAlign = 'center';\n");
      out.write("            container.style.display = 'inline-block';\n");
      out.write("\n");
      out.write("            const title = document.createElement('h3');\n");
      out.write("            title.textContent = logName\n");
      out.write("            title.style.color = 'white';\n");
      out.write("            title.style.marginBottom = '10px';\n");
      out.write("            container.appendChild(title);\n");
      out.write("\n");
      out.write("            const canvasId = `achievementCanvas");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${index}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\n");
      out.write("            const canvasElement = document.createElement('canvas');\n");
      out.write("            canvasElement.id = canvasId;\n");
      out.write("            canvasElement.width = 300;\n");
      out.write("            canvasElement.height = 300;\n");
      out.write("            container.appendChild(canvasElement);\n");
      out.write("\n");
      out.write("            const achievementContainer = document.getElementById('achievementContainer');\n");
      out.write("            achievementContainer.appendChild(container);\n");
      out.write("\n");
      out.write("            const ctx = canvasElement.getContext('2d');\n");
      out.write("            new Chart(ctx, {\n");
      out.write("                type: 'pie',\n");
      out.write("                data: {\n");
      out.write("                    labels: [logName + \" 달성\", logName + \" 미달성\"],\n");
      out.write("                    datasets: [{\n");
      out.write("                        data: [\n");
      out.write("                            goalAchievementData[logName],\n");
      out.write("                            100 - goalAchievementData[logName]\n");
      out.write("                        ],\n");
      out.write("                        backgroundColor: [\n");
      out.write("                            'rgba(75, 192, 192, 0.7)',\n");
      out.write("                            'rgba(255, 99, 132, 0.7)'\n");
      out.write("                        ]\n");
      out.write("                    }]\n");
      out.write("                },\n");
      out.write("                options: {\n");
      out.write("                    plugins: {\n");
      out.write("                        legend: {\n");
      out.write("                            display: true,\n");
      out.write("                            position: 'bottom'\n");
      out.write("                        },\n");
      out.write("                        tooltip: {\n");
      out.write("                            callbacks: {\n");
      out.write("                                label: function (context) {\n");
      out.write("                                    let label = context.label || '';\n");
      out.write("                                    if (label) {\n");
      out.write("                                        label += ': ';\n");
      out.write("                                    }\n");
      out.write("                                    label += context.raw.toFixed(2) + '%';\n");
      out.write("                                    return label;\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        window.onload = function () {\n");
      out.write("            const logSelector = document.getElementById('logSelector');\n");
      out.write("            drawGraph(logSelector.value);\n");
      out.write("            logSelector.addEventListener('change', function () {\n");
      out.write("                drawGraph(this.value);\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            const achievementContainer = document.getElementById('achievementContainer');\n");
      out.write("            achievementContainer.innerHTML = '';\n");
      out.write("            Object.keys(goalAchievementData).forEach((logName, index) => {\n");
      out.write("                createPieChartWithTitle(logName, index);\n");
      out.write("            });\n");
      out.write("        };\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"container\">\n");
      out.write("        <div class=\"menu-bar\">\n");
      out.write("            <div class=\"logo-container\"  onclick=\"location.href='main.jsp'\">\n");
      out.write("                <img src=\"./images/Logo.png\" alt=\"Logo\" class=\"logo\" />\n");
      out.write("                <div class=\"logo-text\">Life Log</div>\n");
      out.write("          </div>\n");
      out.write("          <div class=\"menu-item\" data-page=\"main\" onclick=\"location.href='main.jsp'\">메인</div>\n");
      out.write("          <div class=\"menu-item active\" data-page=\"log-analysis\" onclick=\"location.href='log_analyze.jsp'\">로그 분석</div>\n");
      out.write("          <div class=\"menu-item\" data-page=\"log-record\" onclick=\"location.href='goal_set.jsp'\">로그 기록</div>\n");
      out.write("          <div class=\"menu-item\" data-page=\"diary\" onclick=\"location.href='diary.jsp'\">일기</div>\n");
      out.write("          <div class=\"menu-item place-bottom\" onclick=\"location.href='SignIn.jsp'\">로그아웃</div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("\n");
      out.write("        <div class=\"main-content\">\n");
      out.write("            <h1 class=\"section1\">주간 로그 분석</h1>\n");
      out.write("            <div>\n");
      out.write("                <label for=\"logSelector\">로그 선택:</label>\n");
      out.write("                <select id=\"logSelector\">\n");
      out.write("                    ");
 for (String logName : (Set<String>) request.getAttribute("logNames")) { 
      out.write("\n");
      out.write("                        <option value=\"");
      out.print( logName );
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print( logName );
      out.write("</option>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                </select>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"graph-container\">\n");
      out.write("                <canvas id=\"graphCanvas\" width=\"900\" height=\"400\"></canvas>\n");
      out.write("            </div>\n");
      out.write("            <h1 class=\"section2\">주간 달성률 분석</h1>\n");
      out.write("            <div id=\"achievementContainer\" class=\"graph-container\">\n");
      out.write("            </div>\n");
      out.write("            <h1 class=\"section2\">주간 로그 통계</h1>\n");
      out.write("            <table class=\"info-table\">\n");
      out.write("                <thead>\n");
      out.write("                    <tr>\n");
      out.write("                        <th>항목</th>\n");
      out.write("                        <th>값</th>\n");
      out.write("                    </tr>\n");
      out.write("                </thead>\n");
      out.write("                <tbody>\n");
      out.write("                    ");
 
                        for (String logName : logDataMap.keySet()) {
                            double[] weeklyData = logDataMap.get(logName);
                            double total = Arrays.stream(weeklyData).sum();
                            String unit = unitMap.get(logName);
                    
      out.write("\n");
      out.write("                    <tr>\n");
      out.write("                        <td>");
      out.print( logName );
      out.write("</td>\n");
      out.write("                        <td style=\"text-align: middle;\">");
      out.print( total );
      out.write(' ');
      out.print( unit );
      out.write("</td>\n");
      out.write("                    </tr>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                </tbody>\n");
      out.write("            </table>\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("    </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
