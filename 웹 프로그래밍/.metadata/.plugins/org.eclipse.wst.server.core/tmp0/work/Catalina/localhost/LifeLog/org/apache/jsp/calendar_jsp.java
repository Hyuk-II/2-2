/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-12-14 11:31:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.util.Calendar;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.util.Calendar");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    int year = Integer.parseInt(request.getParameter("year"));
    int month = Integer.parseInt(request.getParameter("month"));
    Calendar calendar = Calendar.getInstance();
    calendar.set(year, month, 1);
    int firstDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
    int daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
    int startBlankCount = firstDayOfWeek - 1;
    int totalCells = startBlankCount + daysInMonth;
    int endBlankCount = (7 - (totalCells % 7)) % 7;
    Calendar today = Calendar.getInstance();
    int todayYear = today.get(Calendar.YEAR);
    int todayMonth = today.get(Calendar.MONTH);
    int todayDay = today.get(Calendar.DAY_OF_MONTH);
    String userId = (String) session.getAttribute("email");
    if (userId == null) {
        out.println("사용자 ID가 세션에 저장되어 있지 않습니다.");
        return;
    }
    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    Map<String, List<String>> tasks = new HashMap<>();
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String url = "jdbc:mysql://localhost:3306/life_log_db?serverTimezone=UTC";
        conn = DriverManager.getConnection(url, "lifelog_admin", "q1w2e3r4");
        String sql = "SELECT task_date, task_description FROM tasks WHERE task_date LIKE ? AND user_id = ?";
        stmt = conn.prepareStatement(sql);
        String formattedMonth = String.format("%02d", month + 1);
        stmt.setString(1, year + "-" + formattedMonth + "%");
        stmt.setString(2, userId);
        rs = stmt.executeQuery();
        while (rs.next()) {
            String taskDate = rs.getString("task_date");
            String taskDescription = rs.getString("task_description");
            tasks.computeIfAbsent(taskDate, k -> new ArrayList<>()).add(taskDescription);
        }
    } catch (Exception e) {
        out.println("DB 연동 오류입니다: " + e.getMessage());
    } finally {
        if (rs != null) try { rs.close(); } catch (SQLException e) { e.printStackTrace(); }
        if (stmt != null) try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); }
        if (conn != null) try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }
    }

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>Calendar</title>\n");
      out.write("    <style>\n");
      out.write("        table, th, td {\n");
      out.write("            border: 1px solid gray;\n");
      out.write("        }\n");
      out.write("        table {\n");
      out.write("            width: 100%;\n");
      out.write("            table-layout: fixed;\n");
      out.write("            border-collapse: collapse;\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("        td {\n");
      out.write("            height: 87px;\n");
      out.write("            vertical-align: top;\n");
      out.write("            position: relative;\n");
      out.write("            overflow: hidden;\n");
      out.write("        }\n");
      out.write("        .task {\n");
      out.write("            font-size: 12px;\n");
      out.write("            margin-top: 5px;\n");
      out.write("            background-color: #00FFFF;\n");
      out.write("            color: black;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            padding: 2px;\n");
      out.write("            word-wrap: break-word;\n");
      out.write("            white-space: normal;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("        }\n");
      out.write("        .task-container{\n");
      out.write("        	overflow-y: auto;\n");
      out.write("        	max-height: 70px;\n");
      out.write("        }\n");
      out.write("        .dates {\n");
      out.write("            padding-top: 15px;\n");
      out.write("            background-color: #1e294a;\n");
      out.write("            color: white;\n");
      out.write("            position: relative;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("            overflow-y: scroll;\n");
      out.write("            max-height: 100%;\n");
      out.write("            scrollbar-width: none;\n");
      out.write("        }\n");
      out.write("        ::-webkit-scrollbar {\n");
      out.write("            display: none;\n");
      out.write("        }\n");
      out.write("        .dates span {\n");
      out.write("            font-size: 12px;\n");
      out.write("            position: absolute;\n");
      out.write("            top: 2px;\n");
      out.write("            right: 5px;\n");
      out.write("        }\n");
      out.write("        .sunday {\n");
      out.write("            background-color: #1F305E;\n");
      out.write("            color: red;\n");
      out.write("        }\n");
      out.write("        .saturday {\n");
      out.write("            background-color: #1F305E;\n");
      out.write("            color: #007bff;\n");
      out.write("        }\n");
      out.write("        .today {\n");
      out.write("            background-color: #7BAFD4;\n");
      out.write("            color: white;\n");
      out.write("            font-weight: bold;\n");
      out.write("        }\n");
      out.write("        .days {\n");
      out.write("            background-color: #007bff;\n");
      out.write("            padding: 10px;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <table>\n");
      out.write("        <thead>\n");
      out.write("            <tr>\n");
      out.write("                <th class=\"days\">일</th>\n");
      out.write("                <th class=\"days\">월</th>\n");
      out.write("                <th class=\"days\">화</th>\n");
      out.write("                <th class=\"days\">수</th>\n");
      out.write("                <th class=\"days\">목</th>\n");
      out.write("                <th class=\"days\">금</th>\n");
      out.write("                <th class=\"days\">토</th>\n");
      out.write("            </tr>\n");
      out.write("        </thead>\n");
      out.write("        <tbody>\n");
      out.write("            ");

                for (int i = 0; i < (startBlankCount + daysInMonth + endBlankCount) / 7; i++) {
            
      out.write("\n");
      out.write("            <tr>\n");
      out.write("                ");
 for (int j = 0; j < 7; j++) {
                    int cellIndex = i * 7 + j;
                    int currentDay = cellIndex - startBlankCount + 1;
                    boolean isToday = currentDay == todayDay && month == todayMonth && year == todayYear;
                    boolean isDate = cellIndex >= startBlankCount && cellIndex < startBlankCount + daysInMonth;
                    String dayClass = "";
                    if (j == 0) {
                        dayClass = "sunday";
                    } else if (j == 6) {
                        dayClass = "saturday";
                    }
                
      out.write("\n");
      out.write("                <td class=\"dates ");
      out.print( isToday ? "today" : "" );
      out.write(' ');
      out.print( dayClass );
      out.write("\" id=\"");
      out.print( month );
      out.print( currentDay );
      out.write("\">\n");
      out.write("                    ");
 if (isDate) { 
      out.write("\n");
      out.write("                    <a href=\"add_task.jsp?year=");
      out.print( year );
      out.write("&month=");
      out.print( month + 1 );
      out.write("&day=");
      out.print( currentDay );
      out.write("\" style=\"display: block; color: inherit; text-decoration: none; width: 100%; height: 100%;\">\n");
      out.write("                        <span>");
      out.print( currentDay );
      out.write("</span>\n");
      out.write("                        <div class=\"task-container\">\n");
      out.write("                            ");

                                String taskKey = year + "-" + String.format("%02d", month + 1) + "-" + String.format("%02d", currentDay);
                                if (tasks.containsKey(taskKey)) {
                                    for (String task : tasks.get(taskKey)) {
                            
      out.write("\n");
      out.write("                            <div class=\"task\">");
      out.print( task );
      out.write("</div>\n");
      out.write("                            ");
         }
                                }
                            
      out.write("\n");
      out.write("                        </div>\n");
      out.write("                    </a>\n");
      out.write("                    ");
 } else { 
      out.write("\n");
      out.write("                    <span></span>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                </td>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("            </tr>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        </tbody>\n");
      out.write("    </table>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
