/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-12-16 13:45:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.servlet.http.*;
import javax.servlet.*;

public final class change_005fpwd_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <link rel=\"icon\" href=\"./images/Logo.png\">\n");
      out.write("    <title>Life Log</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            background-color: #1e1e1e;\n");
      out.write("            color: white;\n");
      out.write("            font-family: Arial, sans-serif;\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            align-items: center;\n");
      out.write("            height: 100vh;\n");
      out.write("            margin: 0;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .container {\n");
      out.write("            width: 1000px;\n");
      out.write("            height: auto;\n");
      out.write("            padding-bottom: 20px;\n");
      out.write("            margin-top: 30px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .header {\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            margin-bottom: 20px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .header img {\n");
      out.write("            width: 40px;\n");
      out.write("            height: 40px;\n");
      out.write("            margin-right: 10px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .header h1 {\n");
      out.write("            color: white;\n");
      out.write("            margin: 0;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .container hr {\n");
      out.write("            height: 2px;\n");
      out.write("            border: none;\n");
      out.write("            background-color: #2D488B;;\n");
      out.write("            margin-top: 0px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .info-table {\n");
      out.write("            width: 85%;\n");
      out.write("            border-collapse: collapse;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .info-table tr {\n");
      out.write("            border-bottom: 1px solid #444;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .info-table td {\n");
      out.write("            padding: 20px 20px;\n");
      out.write("            text-align: left;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .info-table td:first-child {\n");
      out.write("            width: 30%;\n");
      out.write("            color: #a0a0a5;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .info-table input[type=\"password\"] {\n");
      out.write("            width: 50%;\n");
      out.write("            padding: 8px;\n");
      out.write("            background: #222;\n");
      out.write("            border: 1px solid #555;\n");
      out.write("            border-radius: 4px;\n");
      out.write("            color: white;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .button-container {\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            gap: 20px;\n");
      out.write("            margin-top: 40px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .button {\n");
      out.write("            background-color: #1e73e8;\n");
      out.write("            color: white;\n");
      out.write("            padding: 10px 20px;\n");
      out.write("            border: none;\n");
      out.write("            border-radius: 4px;\n");
      out.write("            cursor: pointer;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .button:hover {\n");
      out.write("            background-color: #155bb5;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        function cancelEdit() {\n");
      out.write("            window.location.href = \"profile.jsp\";\n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("    ");

    
        String userEmail = (String) session.getAttribute("email");

        if (userEmail == null) {
            response.sendRedirect("SignIn.jsp");
            return;
        }

        String currentPassword = request.getParameter("current_password");
        String newPassword = request.getParameter("new_password");
        String confirmPassword = request.getParameter("confirm_password");
        String message = "";

        if (currentPassword != null && newPassword != null && confirmPassword != null) {
            if (!newPassword.equals(confirmPassword)) {
                message = "새 비밀번호가 일치하지 않습니다.";
            } else {
                Connection conn = null;
                PreparedStatement pstmt = null;
                ResultSet rs = null;

                try {
                    String url = "jdbc:mysql://localhost:3306/life_log_db?useSSL=false&serverTimezone=UTC";
                    String dbUsername = "lifelog_admin";
                    String dbPassword = "q1w2e3r4";

                    Class.forName("com.mysql.cj.jdbc.Driver");
                    conn = DriverManager.getConnection(url, dbUsername, dbPassword);

                    String sql = "SELECT password FROM users WHERE id = ?";
                    pstmt = conn.prepareStatement(sql);
                    pstmt.setString(1, userEmail);
                    rs = pstmt.executeQuery();

                    if (rs.next()) {
                        String dbPasswordHash = rs.getString("password");

                        if (!currentPassword.equals(dbPasswordHash)) {
                            message = "현재 비밀번호가 일치하지 않습니다.";
                        } else {
                            sql = "UPDATE users SET password = ? WHERE id = ?";
                            pstmt = conn.prepareStatement(sql);
                            pstmt.setString(1, newPassword);
                            pstmt.setString(2, userEmail);
                            int updatedRows = pstmt.executeUpdate();

                            if (updatedRows > 0) {
                                out.println("<script>alert('비밀번호가 성공적으로 변경되었습니다.'); location.href='profile.jsp';</script>");
                            } else {
                                message = "비밀번호 변경에 실패했습니다.";
                            }
                        }
                    } else {
                        message = "사용자를 찾을 수 없습니다.";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    message = "오류가 발생했습니다. 다시 시도해주세요.";
                } finally {
                    if (rs != null) try { rs.close(); } catch (SQLException e) {}
                    if (pstmt != null) try { pstmt.close(); } catch (SQLException e) {}
                    if (conn != null) try { conn.close(); } catch (SQLException e) {}
                }
            }
        }
    
      out.write("\n");
      out.write("    <div class=\"container\">\n");
      out.write("        <div class=\"header\">\n");
      out.write("            <img src=\"");
      out.print( request.getContextPath() );
      out.write("/images/profile-icon.png\" alt=\"Profile Icon\">\n");
      out.write("            <h1>비밀번호 변경</h1>\n");
      out.write("        </div>\n");
      out.write("        <hr>\n");
      out.write("        <form action=\"\" method=\"post\">\n");
      out.write("            <table class=\"info-table\">\n");
      out.write("                <tr>\n");
      out.write("                    <td>현재 비밀번호</td>\n");
      out.write("                    <td><input type=\"password\" name=\"current_password\" placeholder=\"현재 비밀번호\" required></td>\n");
      out.write("                </tr>\n");
      out.write("                <tr>\n");
      out.write("                    <td>새 비밀번호</td>\n");
      out.write("                    <td><input type=\"password\" name=\"new_password\" placeholder=\"새 비밀번호\" required></td>\n");
      out.write("                </tr>\n");
      out.write("                <tr>\n");
      out.write("                    <td>새 비밀번호 확인</td>\n");
      out.write("                    <td><input type=\"password\" name=\"confirm_password\" placeholder=\"새 비밀번호 확인\" required></td>\n");
      out.write("                </tr>\n");
      out.write("            </table>\n");
      out.write("            <div class=\"button-container\">\n");
      out.write("                <button type=\"submit\" class=\"button\">저장</button>\n");
      out.write("                <button type=\"button\" class=\"button\" onclick=\"cancelEdit()\">취소</button>\n");
      out.write("            </div>\n");
      out.write("        </form>\n");
      out.write("        <div style=\"text-align: center; margin-top: 20px;\">\n");
      out.write("            <p>");
      out.print( message );
      out.write("</p>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
