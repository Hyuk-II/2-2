/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-12-14 11:32:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class log_005fset_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("  <title>로그 기록</title>\n");
      out.write("  <style>\n");
      out.write("  	html, body {\n");
      out.write("      height: 100%;\n");
      out.write("      margin: 0;\n");
      out.write("      padding: 0;\n");
      out.write("  	}\n");
      out.write("    body {\n");
      out.write("      font-family: Arial, sans-serif;\n");
      out.write("      background-color: #1e1e1e;\n");
      out.write("      color: white;\n");
      out.write("      display: flex;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .content-container {\n");
      out.write("      flex: 0.8; /* 콘텐츠 영역 비율 */\n");
      out.write("      margin: 20px;\n");
      out.write("      width: 100%;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    h1 {\n");
      out.write("      font-family: Arial;\n");
      out.write("      margin-bottom: 20px;\n");
      out.write("      color: #fff;\n");
      out.write("      border-bottom: 2px solid #2D488B;\n");
      out.write("      padding-bottom: 10px;\n");
      out.write("      text-align: left;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    table {\n");
      out.write("      width: 100%;\n");
      out.write("      border-collapse: collapse;\n");
      out.write("      margin-bottom: 5px;\n");
      out.write("      border-bottom: 2px solid #2D488B;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    th, td {\n");
      out.write("      padding: 10px;\n");
      out.write("      text-align: center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    thead tr {\n");
      out.write("      border-bottom: 1px solid #444;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    tbody tr {\n");
      out.write("      border-bottom: 1px solid #444;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    tbody tr:last-child {\n");
      out.write("      border-bottom: none;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    input[type=\"text\"] {\n");
      out.write("      width: 90%;\n");
      out.write("      padding: 8px;\n");
      out.write("      background-color: #000;\n");
      out.write("      color: #fff;\n");
      out.write("      border: 1px solid #444;\n");
      out.write("      text-align: center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .button-container {\n");
      out.write("      text-align: left;\n");
      out.write("      margin-top: 10px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    button {\n");
      out.write("      padding: 10px 20px;\n");
      out.write("      margin: 5px;\n");
      out.write("      border: none;\n");
      out.write("      background-color: #2D488B;\n");
      out.write("      color: white;\n");
      out.write("      cursor: pointer;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    button:hover {\n");
      out.write("      background-color: #218838;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .list-dot {\n");
      out.write("      font-size: 18px;\n");
      out.write("      text-align: center;\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("    .menu-bar {\n");
      out.write("      flex: 0.1; /* 메뉴바 비율 */\n");
      out.write("      background-color: #274a8f; /* 메뉴바 배경색 */\n");
      out.write("      display: flex;\n");
      out.write("      flex-direction: column;\n");
      out.write("      align-items: center;\n");
      out.write("      padding: 20px 10px;\n");
      out.write("      gap: 20px;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .menu-bar .logo-container {\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      gap: 10px;\n");
      out.write("      margin-bottom: 20px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .menu-bar .logo {\n");
      out.write("      height: 50px;\n");
      out.write("      width: auto;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .menu-bar .logo-text {\n");
      out.write("      font-size: 24px;\n");
      out.write("      font-weight: bold;\n");
      out.write("      color: white;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .menu-item {\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      justify-content: center;\n");
      out.write("      padding: 15px;\n");
      out.write("      width: 80%;\n");
      out.write("      color: white;\n");
      out.write("      text-align: center;\n");
      out.write("      background-color: #274a8f;\n");
      out.write("      border-radius: 5px;\n");
      out.write("      cursor: pointer;\n");
      out.write("      transition: background-color 0.3s ease;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .menu-item:hover,\n");
      out.write("    .menu-item.active {\n");
      out.write("      background-color: #007bff;\n");
      out.write("    }\n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"menu-bar\">\n");
      out.write("    <div class=\"logo-container\">\n");
      out.write("      <img src=\"./image/Logo.png\" alt=\"Logo\" class=\"logo\" />\n");
      out.write("      <div class=\"logo-text\">Life Log</div>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"menu-item\" data-page=\"main\" onclick=\"location.href='main.jsp'\">메인</div>\n");
      out.write("    <div class=\"menu-item\" data-page=\"log-analysis\" onclick=\"location.href='log_analyze.jsp'\">로그 분석</div>\n");
      out.write("    <div class=\"menu-item active\" data-page=\"log-record\" onclick=\"location.href='log_set.jsp'\">로그 기록</div>\n");
      out.write("    <div class=\"menu-item\" data-page=\"diary\" onclick=\"location.href='일기추가.jsp'\">일기</div>\n");
      out.write("  </div>\n");
      out.write("  \n");
      out.write("  <div class=\"content-container\">\n");
      out.write("    <h1>로그 기록</h1>\n");
      out.write("    <table id=\"logTable\">\n");
      out.write("      <thead>\n");
      out.write("        <tr>\n");
      out.write("          <th></th>\n");
      out.write("          <th>로그</th>\n");
      out.write("          <th>기록</th>\n");
      out.write("          <th>목표</th>\n");
      out.write("        </tr>\n");
      out.write("      </thead>\n");
      out.write("      <tbody>\n");
      out.write("        <tr>\n");
      out.write("          <td class=\"list-dot\">•</td>\n");
      out.write("          <td>운동량</td>\n");
      out.write("          <td><input type=\"text\" placeholder=\"기록 입력\"></td>\n");
      out.write("          <td>540 kcal</td>\n");
      out.write("        </tr>\n");
      out.write("        <tr>\n");
      out.write("          <td class=\"list-dot\">•</td>\n");
      out.write("          <td>수면</td>\n");
      out.write("          <td><input type=\"text\" placeholder=\"기록 입력\"></td>\n");
      out.write("          <td>-</td>\n");
      out.write("        </tr>\n");
      out.write("        <tr>\n");
      out.write("          <td class=\"list-dot\">•</td>\n");
      out.write("          <td>물 섭취</td>\n");
      out.write("          <td><input type=\"text\" placeholder=\"기록 입력\"></td>\n");
      out.write("          <td>2L</td>\n");
      out.write("        </tr>\n");
      out.write("        <tr>\n");
      out.write("          <td class=\"list-dot\">•</td>\n");
      out.write("          <td>음주</td>\n");
      out.write("          <td><input type=\"text\" placeholder=\"기록 입력\"></td>\n");
      out.write("          <td>3번 이하</td>\n");
      out.write("        </tr>\n");
      out.write("        <tr>\n");
      out.write("          <td class=\"list-dot\">•</td>\n");
      out.write("          <td>공부</td>\n");
      out.write("          <td><input type=\"text\" placeholder=\"기록 입력\"></td>\n");
      out.write("          <td>6H</td>\n");
      out.write("        </tr>\n");
      out.write("      </tbody>\n");
      out.write("    </table>\n");
      out.write("    <div class=\"button-container\">\n");
      out.write("      <button id=\"saveChanges\">수정완료</button>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("  <script>\n");
      out.write("    document.addEventListener(\"DOMContentLoaded\", () => {\n");
      out.write("      const tableBody = document.getElementById(\"logTable\").querySelector(\"tbody\");\n");
      out.write("      const saveChangesBtn = document.getElementById(\"saveChanges\");\n");
      out.write("\n");
      out.write("      // Save changes: Replace filled inputs with text, keep empty inputs\n");
      out.write("      saveChangesBtn.addEventListener(\"click\", () => {\n");
      out.write("        const rows = tableBody.querySelectorAll(\"tr\");\n");
      out.write("        rows.forEach((row) => {\n");
      out.write("          const inputs = row.querySelectorAll(\"input\");\n");
      out.write("          inputs.forEach((input) => {\n");
      out.write("            const value = input.value.trim(); // Get the value of the input\n");
      out.write("            const cell = input.parentElement; // Get the parent cell of the input\n");
      out.write("            if (value) {\n");
      out.write("              cell.textContent = value; // Replace input with its value\n");
      out.write("            }\n");
      out.write("          });\n");
      out.write("        });\n");
      out.write("      });\n");
      out.write("    });\n");
      out.write("  </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
