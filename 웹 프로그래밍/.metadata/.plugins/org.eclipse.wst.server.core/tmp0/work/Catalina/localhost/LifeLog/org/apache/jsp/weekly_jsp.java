/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-12-15 06:15:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import javax.servlet.http.*;

public final class weekly_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

String userEmail = (String) session.getAttribute("email");

String dbUrl = "jdbc:mysql://localhost:3306/life_log_db?serverTimezone=UTC";
String dbUser = "lifelog_admin";
String dbPassword = "q1w2e3r4";

Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;

Map<String, double[]> logDataMap = new LinkedHashMap<>();
Map<String, String> unitMap = new LinkedHashMap<>();
Map<String, Double> goalAchievementMap = new LinkedHashMap<>();

try {
    if (userEmail == null) {
        response.sendRedirect("login.jsp");
        return;
    }

    Class.forName("com.mysql.cj.jdbc.Driver");
    conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);

    String logNameQuery = "SELECT DISTINCT log_name, unit FROM logs WHERE user_id = ?";
    pstmt = conn.prepareStatement(logNameQuery);
    pstmt.setString(1, userEmail);
    rs = pstmt.executeQuery();
    List<String> logNames = new ArrayList<>();
    while (rs.next()) {
        String logName = rs.getString("log_name");
        logNames.add(logName);
        unitMap.put(logName, rs.getString("unit"));
    }
    rs.close();
    pstmt.close();

    for (String logName : logNames) {
        double[] weeklyData = new double[7];
        Arrays.fill(weeklyData, 0.0);
        double totalInput = 0.0;
        int activeDays = 0;
        double goalValue = 0.0;

        String query = 
            "SELECT day_of_week, SUM(input_value) AS total_input, COUNT(DISTINCT date_entered) AS active_days, goal_value " +
            "FROM logs " +
            "WHERE user_id = ? AND log_name = ? AND WEEK(date_entered, 1) = ( " +
            "    SELECT MAX(WEEK(date_entered, 1)) FROM logs WHERE user_id = ? AND log_name = ? " +
            ") GROUP BY day_of_week, goal_value";
        pstmt = conn.prepareStatement(query);
        pstmt.setString(1, userEmail);
        pstmt.setString(2, logName);
        pstmt.setString(3, userEmail);
        pstmt.setString(4, logName);

        rs = pstmt.executeQuery();

        Map<String, Integer> dayIndexMap = Map.of(
            "월요일", 0,
            "화요일", 1,
            "수요일", 2,
            "목요일", 3,
            "금요일", 4,
            "토요일", 5,
            "일요일", 6
        );

        while (rs.next()) {
            String day = rs.getString("day_of_week");
            double dayTotalInput = rs.getDouble("total_input");
            int dayActiveDays = rs.getInt("active_days");
            goalValue = rs.getDouble("goal_value");

            totalInput += dayTotalInput;
            activeDays += dayActiveDays;

            if (dayIndexMap.containsKey(day)) {
                int index = dayIndexMap.get(day);
                weeklyData[index] = dayTotalInput;
            }
        }

        if (activeDays > 0 && goalValue > 0) {
            double achievementRate = (totalInput / (activeDays * goalValue)) * 100;
            goalAchievementMap.put(logName, achievementRate);
        }

        logDataMap.put(logName, weeklyData);
        rs.close();
    }

} catch (Exception e) {
    e.printStackTrace();
} finally {
    if (rs != null) rs.close();
    if (pstmt != null) pstmt.close();
    if (conn != null) conn.close();
}

// JSON 데이터를 생성
StringBuilder graphDataJsonBuilder = new StringBuilder();
graphDataJsonBuilder.append("{");
int logIndex = 0;
for (Map.Entry<String, double[]> entry : logDataMap.entrySet()) {
    graphDataJsonBuilder.append("\"").append(entry.getKey()).append("\": [");
    double[] data = entry.getValue();
    for (int i = 0; i < data.length; i++) {
        graphDataJsonBuilder.append(data[i]);
        if (i < data.length - 1) {
            graphDataJsonBuilder.append(", ");
        }
    }
    graphDataJsonBuilder.append("]");
    if (logIndex < logDataMap.size() - 1) {
        graphDataJsonBuilder.append(", ");
    }
    logIndex++;
}
graphDataJsonBuilder.append("}");
String graphDataJson = graphDataJsonBuilder.toString();

StringBuilder goalAchievementJsonBuilder = new StringBuilder();
goalAchievementJsonBuilder.append("{");
int achievementIndex = 0;
for (Map.Entry<String, Double> entry : goalAchievementMap.entrySet()) {
    goalAchievementJsonBuilder.append("\"").append(entry.getKey()).append("\": ").append(entry.getValue());
    if (achievementIndex < goalAchievementMap.size() - 1) {
        goalAchievementJsonBuilder.append(", ");
    }
    achievementIndex++;
}
goalAchievementJsonBuilder.append("}");
String goalAchievementJson = goalAchievementJsonBuilder.toString();

request.setAttribute("graphData", graphDataJson);
request.setAttribute("goalAchievementData", goalAchievementJson);
request.setAttribute("logNames", logDataMap.keySet());
request.setAttribute("unitMap", unitMap);

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>주간 달성률 분석</title>\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n");
      out.write("    <style>\n");
      out.write("        #achievementContainer {\n");
      out.write("            display: grid;\n");
      out.write("            grid-template-columns: repeat(2, 1fr);\n");
      out.write("            gap: 20px;\n");
      out.write("            justify-items: center;\n");
      out.write("        }\n");
      out.write("        #achievementContainer div {\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("        #achievementContainer canvas {\n");
      out.write("            width: 200px !important;\n");
      out.write("            height: 200px !important;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div id=\"achievementContainer\"></div>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        const goalAchievementData = JSON.parse('");
      out.print( request.getAttribute("goalAchievementData") );
      out.write("');\n");
      out.write("        \n");
      out.write("        function createPieChart(logName, achievementRate) {\n");
      out.write("            const container = document.createElement('div');\n");
      out.write("            const canvas = document.createElement('canvas');\n");
      out.write("            canvas.width = 300;\n");
      out.write("            canvas.height = 300;\n");
      out.write("\n");
      out.write("            container.appendChild(canvas);\n");
      out.write("            const ctx = canvas.getContext('2d');\n");
      out.write("            const remainingRate = 100 - achievementRate;\n");
      out.write("\n");
      out.write("            new Chart(ctx, {\n");
      out.write("                type: 'pie',\n");
      out.write("                data: {\n");
      out.write("                    labels: [`");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" 달성`, `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" 미달성`],\n");
      out.write("                    datasets: [{\n");
      out.write("                        data: [achievementRate, remainingRate],\n");
      out.write("                        backgroundColor: ['rgba(75, 192, 192, 0.7)',\n");
      out.write("                            'rgba(255, 99, 132, 0.7)']\n");
      out.write("                    }]\n");
      out.write("                },\n");
      out.write("                options: {\n");
      out.write("                    plugins: {\n");
      out.write("                        legend: {\n");
      out.write("                            position: 'bottom',\n");
      out.write("                            labels: {\n");
      out.write("                                color: 'white'\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            const achievementContainer = document.getElementById('achievementContainer');\n");
      out.write("            const title = document.createElement('h3');\n");
      out.write("            title.innerText = logName;\n");
      out.write("            title.style.color = 'white';\n");
      out.write("            container.insertBefore(title, canvas);\n");
      out.write("            achievementContainer.appendChild(container);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        Object.entries(goalAchievementData).forEach(([logName, achievementRate]) => {\n");
      out.write("            createPieChart(logName, parseFloat(achievementRate));\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
