/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-12-16 08:48:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class diary_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("  <link rel=\"icon\" href=\"./images/Logo.png\">\n");
      out.write("  <title>Life Log</title>\n");
      out.write("  <style>\n");
      out.write("    body {\n");
      out.write("      font-family: Arial, sans-serif;\n");
      out.write("      background-color: #1e1e1e;\n");
      out.write("      color: white;\n");
      out.write("      margin: 0;\n");
      out.write("      padding: 0;\n");
      out.write("      display: flex;\n");
      out.write("      height: 100vh;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .controls {\n");
      out.write("      text-align: left;\n");
      out.write("      padding: 20px;\n");
      out.write("      border-bottom: 2px solid #2D488B;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .controls button {\n");
      out.write("      background-color: transparent;\n");
      out.write("      border: none;\n");
      out.write("      color: white;\n");
      out.write("      font-size: 18px;\n");
      out.write("      font-weight: bold;\n");
      out.write("      cursor: pointer;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .controls button:hover {\n");
      out.write("      color: #2D488B;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .content-container {\n");
      out.write("      flex: 1;\n");
      out.write("      display: flex;\n");
      out.write("      flex-direction: column;\n");
      out.write("      overflow-y: auto;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .container {\n");
      out.write("      display: flex;\n");
      out.write("      flex-wrap: wrap;\n");
      out.write("      row-gap: 50px;\n");
      out.write("      column-gap: 30px;\n");
      out.write("      padding: 20px;\n");
      out.write("      justify-content: flex-start;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .diary-box {\n");
      out.write("      width: 250px;\n");
      out.write("      height: 250px;\n");
      out.write("      background-color: white;\n");
      out.write("      color: black;\n");
      out.write("      border: 1px solid #ccc;\n");
      out.write("      border-radius: 5px;\n");
      out.write("      display: flex;\n");
      out.write("      flex-direction: column;\n");
      out.write("      justify-content: space-between;\n");
      out.write("      position: relative;\n");
      out.write("      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n");
      out.write("      opacity: 0; /* 초기 상태 */\n");
      out.write("      transform: scale(0.9);\n");
      out.write("      transition: opacity 0.5s ease, transform 0.5s ease;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .diary-box.show {\n");
      out.write("      opacity: 1;\n");
      out.write("      transform: scale(1);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .diary-box.hide {\n");
      out.write("      opacity: 0;\n");
      out.write("      transform: scale(0.9);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .diary-box header {\n");
      out.write("      background-color: #ccc;\n");
      out.write("      padding: 5px;\n");
      out.write("      text-align: center;\n");
      out.write("      font-weight: bold;\n");
      out.write("      position: relative;\n");
      out.write("      display: flex;\n");
      out.write("      justify-content: space-between;\n");
      out.write("      align-items: center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .diary-box header .date-label {\n");
      out.write("      flex-grow: 1;\n");
      out.write("      text-align: center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .diary-box header .date-icon {\n");
      out.write("      cursor: pointer;\n");
      out.write("      position: relative;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .diary-box .content {\n");
      out.write("      flex-grow: 1;\n");
      out.write("      padding: 10px;\n");
      out.write("      font-size: 14px;\n");
      out.write("      overflow-y: auto;\n");
      out.write("      color: #000000;\n");
      out.write("      opacity: 0.7;\n");
      out.write("      cursor: pointer;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .diary-box .content.active {\n");
      out.write("      color: black;\n");
      out.write("      opacity: 1;\n");
      out.write("      cursor: text;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .diary-box .delete-button {\n");
      out.write("      position: absolute;\n");
      out.write("      bottom: 10px;\n");
      out.write("      right: 10px;\n");
      out.write("      background-color: transparent;\n");
      out.write("      color: rgba(0, 0, 0, 0.5);\n");
      out.write("      font-size: 20px;\n");
      out.write("      font-weight: bold;\n");
      out.write("      border: none;\n");
      out.write("      cursor: pointer;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .diary-box .delete-button:hover {\n");
      out.write("      color: rgba(0, 0, 0, 0.8);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    header input[type=\"date\"] {\n");
      out.write("      position: absolute;\n");
      out.write("      top: 50%;\n");
      out.write("      left: 50%;\n");
      out.write("      transform: translate(-50%, -50%);\n");
      out.write("      z-index: 1;\n");
      out.write("      background: white;\n");
      out.write("      border: 1px solid #ccc;\n");
      out.write("      border-radius: 4px;\n");
      out.write("      padding: 5px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .menu-bar {\n");
      out.write("      width:200px;\n");
      out.write("      background-color: #274a8f;\n");
      out.write("      display: flex;\n");
      out.write("      flex-direction: column;\n");
      out.write("      align-items: center;\n");
      out.write("      padding: 20px 10px;\n");
      out.write("      gap: 20px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .menu-bar .logo-container {\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      gap: 10px;\n");
      out.write("      margin-bottom: 20px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .menu-bar .logo {\n");
      out.write("      height: 50px;\n");
      out.write("      width: auto;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .menu-bar .logo-text {\n");
      out.write("      font-size: 24px;\n");
      out.write("      font-weight: bold;\n");
      out.write("      color: white;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .menu-item {\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      justify-content: center;\n");
      out.write("      padding: 15px;\n");
      out.write("      width: 80%;\n");
      out.write("      color: white;\n");
      out.write("      text-align: center;\n");
      out.write("      background-color: #274a8f;\n");
      out.write("      border-radius: 5px;\n");
      out.write("      cursor: pointer;\n");
      out.write("      transition: background-color 0.3s ease;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .menu-item:hover,\n");
      out.write("    .menu-item.active {\n");
      out.write("      background-color: #007bff;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    \n");
      out.write("    .place-bottom{\n");
      out.write("      	bottom: 12px;\n");
      out.write("      	width: 160px;\n");
      out.write("     	position: absolute;\n");
      out.write("     }\n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("  <div class=\"menu-bar\">\n");
      out.write("    <div class=\"logo-container\"  onclick=\"location.href='main.jsp'\">\n");
      out.write("      <img src=\"./images/Logo.png\" alt=\"Logo\" class=\"logo\" />\n");
      out.write("      <div class=\"logo-text\">Life Log</div>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"menu-item\" data-page=\"main\" onclick=\"location.href='main.jsp'\">메인</div>\n");
      out.write("    <div class=\"menu-item\" data-page=\"log-analysis\" onclick=\"location.href='log_analyze.jsp'\">로그 분석</div>\n");
      out.write("    <div class=\"menu-item\" data-page=\"log-record\" onclick=\"location.href='goal_set.jsp'\">로그 기록</div>\n");
      out.write("    <div class=\"menu-item active\" data-page=\"diary\" onclick=\"location.href='diary.jsp'\">일기</div>\n");
      out.write("    <div class=\"menu-item place-bottom\" onclick=\"location.href='SignOut.jsp'\">로그아웃</div>\n");
      out.write("  </div>\n");
      out.write("\n");
      out.write("  <div class=\"content-container\">\n");
      out.write("    <div class=\"controls\">\n");
      out.write("      <button id=\"addDiaryButton\">+ 일기 추가</button>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"container\" id=\"diaryContainer\">\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("\n");
      out.write("  <script>\n");
      out.write("    const diaryContainer = document.getElementById('diaryContainer');\n");
      out.write("    const addDiaryButton = document.getElementById('addDiaryButton');\n");
      out.write("\n");
      out.write("    addDiaryButton.addEventListener('click', () => {\n");
      out.write("      const diaryBox = createDiaryBox();\n");
      out.write("      diaryContainer.appendChild(diaryBox);\n");
      out.write("\n");
      out.write("      setTimeout(() => {\n");
      out.write("        diaryBox.classList.add('show');\n");
      out.write("      }, 10);\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    function createDiaryBox(entry = {}) {\n");
      out.write("      const diaryBox = document.createElement('div');\n");
      out.write("      diaryBox.className = 'diary-box';\n");
      out.write("      diaryBox.setAttribute('data-entry-id', entry.entry_id || '');\n");
      out.write("\n");
      out.write("      const header = document.createElement('header');\n");
      out.write("      const dateLabel = document.createElement('span');\n");
      out.write("      dateLabel.className = 'date-label';\n");
      out.write("      dateLabel.textContent = entry.date_written || '날짜 선택';\n");
      out.write("\n");
      out.write("      const dateIcon = document.createElement('span');\n");
      out.write("      dateIcon.className = 'date-icon';\n");
      out.write("      dateIcon.textContent = '📅';\n");
      out.write("\n");
      out.write("      header.appendChild(dateLabel);\n");
      out.write("      header.appendChild(dateIcon);\n");
      out.write("\n");
      out.write("      const content = document.createElement('div');\n");
      out.write("      content.className = 'content';\n");
      out.write("      content.contentEditable = false;\n");
      out.write("      content.textContent = entry.diary_content || '내용';\n");
      out.write("\n");
      out.write("      const deleteButton = document.createElement('button');\n");
      out.write("      deleteButton.className = 'delete-button';\n");
      out.write("      deleteButton.textContent = '×';\n");
      out.write("\n");
      out.write("      diaryBox.appendChild(header);\n");
      out.write("      diaryBox.appendChild(content);\n");
      out.write("      diaryBox.appendChild(deleteButton);\n");
      out.write("\n");
      out.write("      addCalendarFunctionality(dateLabel, dateIcon, diaryBox);\n");
      out.write("\n");
      out.write("      content.addEventListener('click', () => {\n");
      out.write("        content.contentEditable = true;\n");
      out.write("        content.focus();\n");
      out.write("        content.classList.add('active');\n");
      out.write("        if (content.textContent === '내용') {\n");
      out.write("          content.textContent = '';\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("\n");
      out.write("      content.addEventListener('keypress', (event) => {\n");
      out.write("        if (event.key === 'Enter') {\n");
      out.write("          event.preventDefault();\n");
      out.write("          saveDiary(diaryBox);\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("\n");
      out.write("      content.addEventListener('blur', () => {\n");
      out.write("        saveDiary(diaryBox);\n");
      out.write("      });\n");
      out.write("\n");
      out.write("      deleteButton.addEventListener('click', () => {\n");
      out.write("        const entryId = diaryBox.getAttribute('data-entry-id');\n");
      out.write("        if (entryId) {\n");
      out.write("          deleteDiary(entryId, diaryBox);\n");
      out.write("        } else {\n");
      out.write("          diaryBox.classList.add('hide');\n");
      out.write("          setTimeout(() => {\n");
      out.write("            diaryContainer.removeChild(diaryBox);\n");
      out.write("          }, 500);\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("\n");
      out.write("      return diaryBox;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function addCalendarFunctionality(dateLabel, dateIcon, diaryBox) {\n");
      out.write("      dateIcon.addEventListener('click', () => {\n");
      out.write("        const existingInput = dateLabel.querySelector('input[type=\"date\"]');\n");
      out.write("        if (existingInput) {\n");
      out.write("          dateLabel.removeChild(existingInput);\n");
      out.write("          if (!diaryBox.getAttribute('data-entry-id')) {\n");
      out.write("            dateLabel.textContent = '날짜 선택';\n");
      out.write("          }\n");
      out.write("          return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        const dateInput = document.createElement('input');\n");
      out.write("        dateInput.type = 'date';\n");
      out.write("        dateInput.addEventListener('change', () => {\n");
      out.write("          if (dateInput.value) {\n");
      out.write("            dateLabel.textContent = dateInput.value;\n");
      out.write("            saveDiary(diaryBox);\n");
      out.write("          }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        dateLabel.textContent = '';\n");
      out.write("        dateLabel.appendChild(dateInput);\n");
      out.write("        dateInput.focus();\n");
      out.write("      });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function saveDiary(diaryBox) {\n");
      out.write("      const entryId = diaryBox.getAttribute('data-entry-id');\n");
      out.write("      const content = diaryBox.querySelector('.content').textContent.trim();\n");
      out.write("      const dateWritten = diaryBox.querySelector('.date-label').textContent.trim();\n");
      out.write("\n");
      out.write("      if (!dateWritten || dateWritten === '날짜 선택') {\n");
      out.write("        alert('날짜를 선택해주세요.');\n");
      out.write("        return;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      if (!content || content === '내용') {\n");
      out.write("        alert('내용을 입력해주세요.');\n");
      out.write("        return;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      const data = {\n");
      out.write("        entry_id: entryId,\n");
      out.write("        diary_content: content,\n");
      out.write("        date_written: dateWritten\n");
      out.write("      };\n");
      out.write("\n");
      out.write("      fetch('saveDiaries.jsp', {\n");
      out.write("        method: 'POST',\n");
      out.write("        headers: {\n");
      out.write("          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n");
      out.write("        },\n");
      out.write("        body: new URLSearchParams(data)\n");
      out.write("      })\n");
      out.write("      .then(response => response.json())\n");
      out.write("      .then(result => {\n");
      out.write("        if (result.status === 'success') {\n");
      out.write("          if (!entryId) {\n");
      out.write("            diaryBox.setAttribute('data-entry-id', result.entry_id);\n");
      out.write("          }\n");
      out.write("          alert(result.message);\n");
      out.write("        } else if (result.status === 'session_expired') {\n");
      out.write("          alert(result.message);\n");
      out.write("          window.location.href = 'SignIn.jsp';\n");
      out.write("        } else {\n");
      out.write("          alert(result.message);\n");
      out.write("        }\n");
      out.write("      })\n");
      out.write("      .catch(error => {\n");
      out.write("        console.error('Error:', error);\n");
      out.write("        alert('서버와의 통신 중 오류가 발생했습니다.');\n");
      out.write("      })\n");
      out.write("      .finally(() => {\n");
      out.write("        diaryBox.querySelector('.content').contentEditable = false;\n");
      out.write("        diaryBox.querySelector('.content').classList.remove('active');\n");
      out.write("      });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function deleteDiary(entryId, diaryBox) {\n");
      out.write("      if (!confirm('정말로 이 일기를 삭제하시겠습니까?')) {\n");
      out.write("        return;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      fetch('deleteDiary.jsp', {\n");
      out.write("        method: 'POST',\n");
      out.write("        headers: {\n");
      out.write("          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n");
      out.write("        },\n");
      out.write("        body: new URLSearchParams({ entry_id: entryId })\n");
      out.write("      })\n");
      out.write("      .then(response => response.json())\n");
      out.write("      .then(result => {\n");
      out.write("        if (result.status === 'success') {\n");
      out.write("          diaryBox.classList.add('hide');\n");
      out.write("          setTimeout(() => {\n");
      out.write("            diaryContainer.removeChild(diaryBox);\n");
      out.write("          }, 500);\n");
      out.write("        } else if (result.status === 'session_expired') {\n");
      out.write("          alert(result.message);\n");
      out.write("          window.location.href = 'SignIn.jsp';\n");
      out.write("        } else {\n");
      out.write("          alert(result.message);\n");
      out.write("        }\n");
      out.write("      })\n");
      out.write("      .catch(error => {\n");
      out.write("        console.error('Error:', error);\n");
      out.write("        alert('서버와의 통신 중 오류가 발생했습니다.');\n");
      out.write("      });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function loadDiaries() {\n");
      out.write("      console.log('Loading diaries...');\n");
      out.write("      fetch('loadDiaries.jsp', {\n");
      out.write("        method: 'GET',\n");
      out.write("        headers: {\n");
      out.write("          'Content-Type': 'application/json;charset=UTF-8'\n");
      out.write("        }\n");
      out.write("      })\n");
      out.write("      .then(response => {\n");
      out.write("        console.log('Load Diaries Response:', response);\n");
      out.write("        if (!response.ok) {\n");
      out.write("          throw new Error('Network response was not ok');\n");
      out.write("        }\n");
      out.write("        return response.json();\n");
      out.write("      })\n");
      out.write("      .then(result => {\n");
      out.write("        console.log('Load Diaries Result:', result);\n");
      out.write("        if (result.status === 'success') {\n");
      out.write("          result.diaries.forEach(diary => {\n");
      out.write("            const diaryBox = createDiaryBox(diary);\n");
      out.write("            diaryContainer.appendChild(diaryBox);\n");
      out.write("\n");
      out.write("            setTimeout(() => {\n");
      out.write("              diaryBox.classList.add('show');\n");
      out.write("            }, 10);\n");
      out.write("          });\n");
      out.write("        } else if (result.status === 'session_expired') {\n");
      out.write("          alert(result.message);\n");
      out.write("          window.location.href = 'SignIn.jsp';\n");
      out.write("        } else {\n");
      out.write("          alert(result.message);\n");
      out.write("        }\n");
      out.write("      })\n");
      out.write("      .catch(error => {\n");
      out.write("        console.error('Load Diaries Error:', error);\n");
      out.write("        alert('서버와의 통신 중 오류가 발생했습니다.');\n");
      out.write("      });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    window.addEventListener('DOMContentLoaded', loadDiaries);\n");
      out.write("  </script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
