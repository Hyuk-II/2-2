/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-12-15 10:16:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;

public final class add_005ftask_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <link rel=\"icon\" href=\"./images/Logo.png\">\n");
      out.write("    <title>Life Log</title>\n");
      out.write("    <style type=\"text/css\">\n");
      out.write("        body, html {\n");
      out.write("            margin: 0;\n");
      out.write("            padding: 0;\n");
      out.write("            height: 100%;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("            background-color: #1e294a;\n");
      out.write("            color: white;\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            flex-direction: column;\n");
      out.write("        }\n");
      out.write("        button {\n");
      out.write("            width: 200px;\n");
      out.write("            padding: 10px;\n");
      out.write("            border: none;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            font-size: 16px;\n");
      out.write("            cursor: pointer;\n");
      out.write("            background-color: #007bff;\n");
      out.write("            color: white;\n");
      out.write("            margin-top: 20px;\n");
      out.write("        }\n");
      out.write("        form {\n");
      out.write("            display: flex;\n");
      out.write("            align-items: center;\n");
      out.write("            flex-direction: column;\n");
      out.write("        }\n");
      out.write("        .task-list {\n");
      out.write("            width: 80%;\n");
      out.write("            margin: 20px 0;\n");
      out.write("        }\n");
      out.write("        .task-item {\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: space-between;\n");
      out.write("            background-color: #2e3b55;\n");
      out.write("            padding: 10px;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            margin-bottom: 10px;\n");
      out.write("        }\n");
      out.write("        .task-item span {\n");
      out.write("            color: white;\n");
      out.write("        }\n");
      out.write("        .delete-btn {\n");
      out.write("            background-color: red;\n");
      out.write("            color: white;\n");
      out.write("            border: none;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            cursor: pointer;\n");
      out.write("            padding: 5px 10px;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");

    request.setCharacterEncoding("UTF-8");
    String year = request.getParameter("year");
    String month = request.getParameter("month");
    String day = request.getParameter("day");
    String email = session.getAttribute("email").toString();

    if ("POST".equalsIgnoreCase(request.getMethod())) {
        String task = request.getParameter("task");
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/life_log_db?serverTimezone=UTC";
            conn = DriverManager.getConnection(url, "lifelog_admin", "q1w2e3r4");
            String sql = "INSERT INTO tasks (task_date, task_description, user_id) VALUES (?, ?, ?)";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, year + "-" + month + "-" + day);
            stmt.setString(2, task);
            stmt.setString(3, email);
            stmt.executeUpdate();
        } catch (Exception e) {
            out.println("DB 연동 오류입니다: " + e.getMessage());
        } finally {
            if (stmt != null) try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); }
            if (conn != null) try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }
        }
    }

    
    String deleteTaskId = request.getParameter("deleteTaskId");
    if (deleteTaskId != null) {
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/life_log_db?serverTimezone=UTC";
            conn = DriverManager.getConnection(url, "lifelog_admin", "q1w2e3r4");
            String sql = "DELETE FROM tasks WHERE id = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, Integer.parseInt(deleteTaskId));
            stmt.executeUpdate();
        } catch (Exception e) {
            out.println("DB 연동 오류입니다: " + e.getMessage());
        } finally {
            if (stmt != null) try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); }
            if (conn != null) try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }
        }
    }

    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    List<Map<String, String>> taskList = new ArrayList<>();
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String url = "jdbc:mysql://localhost:3306/life_log_db?serverTimezone=UTC";
        conn = DriverManager.getConnection(url, "lifelog_admin", "q1w2e3r4");
        String sql = "SELECT id, task_description FROM tasks WHERE task_date = ? AND user_id = ?";
        stmt = conn.prepareStatement(sql);
        stmt.setString(1, year + "-" + month + "-" + day);
        stmt.setString(2, email);
        rs = stmt.executeQuery();
        while (rs.next()) {
            Map<String, String> task = new HashMap<>();
            task.put("id", rs.getString("id"));
            task.put("description", rs.getString("task_description"));
            taskList.add(task);
        }
    } catch (Exception e) {
        out.println("DB 연동 오류입니다: " + e.getMessage());
    } finally {
        if (rs != null) try { rs.close(); } catch (SQLException e) { e.printStackTrace(); }
        if (stmt != null) try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); }
        if (conn != null) try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }
    }

      out.write("\n");
      out.write("\n");
      out.write("<h1>");
      out.print( year );
      out.write('-');
      out.print( month );
      out.write('-');
      out.print( day );
      out.write("</h1>\n");
      out.write("\n");
      out.write("<div class=\"task-list\">\n");
      out.write("    ");
 for (Map<String, String> task : taskList) { 
      out.write("\n");
      out.write("        <div class=\"task-item\">\n");
      out.write("            <span>");
      out.print( task.get("description") );
      out.write("</span>\n");
      out.write("            <form method=\"get\" style=\"margin: 0;\">\n");
      out.write("                <input type=\"hidden\" name=\"year\" value=\"");
      out.print( year );
      out.write("\">\n");
      out.write("                <input type=\"hidden\" name=\"month\" value=\"");
      out.print( month );
      out.write("\">\n");
      out.write("                <input type=\"hidden\" name=\"day\" value=\"");
      out.print( day );
      out.write("\">\n");
      out.write("                <input type=\"hidden\" name=\"deleteTaskId\" value=\"");
      out.print( task.get("id") );
      out.write("\">\n");
      out.write("                <button type=\"submit\" class=\"delete-btn\">X</button>\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<form method=\"post\">\n");
      out.write("    <textarea name=\"task\" rows=\"4\" cols=\"50\" required></textarea>\n");
      out.write("    <br>\n");
      out.write("    <button type=\"submit\">할일 추가</button>\n");
      out.write("</form>\n");
      out.write("<button type=\"button\" onclick=\"location.href='main.jsp'\">돌아가기</button>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
